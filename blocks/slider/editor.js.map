{"version":3,"file":"slider/editor.js","mappings":"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","sources":["webpack://flexible-slider-and-carousel/external window [\"wp\",\"element\"]","webpack://flexible-slider-and-carousel/external window [\"wp\",\"data\"]","webpack://flexible-slider-and-carousel/external window [\"wp\",\"components\"]","webpack://flexible-slider-and-carousel/external window [\"wp\",\"apiFetch\"]","webpack://flexible-slider-and-carousel/external window [\"wp\",\"coreData\"]","webpack://flexible-slider-and-carousel/external window \"React\"","webpack://flexible-slider-and-carousel/external window [\"wp\",\"blockEditor\"]","webpack://flexible-slider-and-carousel/external window [\"wp\",\"i18n\"]","webpack://flexible-slider-and-carousel/external window [\"wp\",\"blocks\"]","webpack://flexible-slider-and-carousel/webpack/bootstrap","webpack://flexible-slider-and-carousel/webpack/runtime/compat get default export","webpack://flexible-slider-and-carousel/webpack/runtime/define property getters","webpack://flexible-slider-and-carousel/webpack/runtime/hasOwnProperty shorthand","webpack://flexible-slider-and-carousel/./src/slider/index.js"],"sourcesContent":["module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"apiFetch\"];","module.exports = window[\"wp\"][\"coreData\"];","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"i18n\"];","module.exports = window[\"wp\"][\"blocks\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","import { registerBlockType } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\nimport {\n    useBlockProps,\n    InnerBlocks,\n    InspectorControls,\n    useInnerBlocksProps,\n    BlockControls,\n    AlignmentToolbar,\n    ColorPalette\n} from '@wordpress/block-editor';\nimport {\n    PanelBody,\n    SelectControl,\n    ToggleControl,\n    RangeControl,\n    TextControl,\n    Button,\n    Notice,\n    Spinner,\n    ColorIndicator,\n    Popover\n} from '@wordpress/components';\nimport { useState, useEffect } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { store as coreDataStore } from '@wordpress/core-data';\nimport apiFetch from '@wordpress/api-fetch';\n\nconst ALLOWED_BLOCKS = ['flexible-slider-carousel/frame'];\nconst TEMPLATE = [\n    ['flexible-slider-carousel/frame', {}]\n];\n\nconst SliderBlock = ({ attributes, setAttributes, clientId }) => {\n    const {\n        sliderDesign,\n        autoPlay,\n        autoPlaySpeed,\n        touchSwipe,\n        showNavigation,\n        showDots,\n        showTextNavigation,\n        textNavigationPosition,\n        responsiveSettings,\n        loading,\n        // Glide.js specific attributes\n        sliderType,\n        gap,\n        animationDuration,\n        animationTimingFunc,\n        animationType,\n        animationDirection,\n        animationIntensity,\n        focusAt,\n        peek,\n        keyboard,\n        touchRatio,\n        intersectionObserver,\n        align,\n        customCSS,\n        // Tab Styling Attributes\n        tabFontSize,\n        tabFontWeight,\n        tabTextAlign,\n        tabPadding,\n        tabBorderRadius,\n        tabBorderWidth,\n        tabTextColor,\n        tabTextColorHover,\n        tabTextColorActive,\n        tabBackgroundColor,\n        tabBackgroundColorHover,\n        tabBackgroundColorActive,\n        tabBorderColor,\n        tabBorderColorHover,\n        tabBorderColorActive,\n        tabBoxShadow,\n        tabBoxShadowActive,\n        // Navigation Colors\n        arrowBackgroundColor,\n        arrowBackgroundColorHover,\n        arrowTextColor,\n        dotBackgroundColor,\n        dotBackgroundColorHover,\n        dotBackgroundColorActive\n    } = attributes;\n\n    // Extract slidesToShow from responsiveSettings\n    const slidesToShow = responsiveSettings?.slidesToShow || { desktop: 1, tablet: 1, phone: 1 };\n    const slidesToScroll = responsiveSettings?.slidesToScroll || { desktop: 1, tablet: 1, phone: 1 };\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [activeColorPicker, setActiveColorPicker] = useState(null);\n    const [previewBreakpoint, setPreviewBreakpoint] = useState('desktop');\n\n    const blockProps = useBlockProps({\n        className: `fsc-slider fsc-slider--${sliderDesign || 'default'}`,\n        style: {\n            textAlign: align\n        },\n        'data-slides-desktop': slidesToShow?.desktop || 1,\n        'data-slides-tablet': slidesToShow?.tablet || 1,\n        'data-slides-phone': slidesToShow?.phone || 1,\n        'data-slides-scroll-desktop': slidesToScroll?.desktop || 1,\n        'data-slides-scroll-tablet': slidesToScroll?.tablet || 1,\n        'data-slides-scroll-phone': slidesToScroll?.phone || 1,\n        'data-slider-type': sliderType || 'carousel',\n        'data-gap': gap || 10,\n        'data-animation-duration': animationDuration || 800,\n        'data-animation-timing-func': animationTimingFunc || 'cubic-bezier(0.165, 0.840, 0.440, 1.000)',\n        'data-animation-type': animationType || 'slide',\n        'data-animation-direction': animationDirection || 'horizontal',\n        'data-animation-intensity': animationIntensity || 50,\n        'data-focus-at': focusAt || 'center',\n        'data-peek': peek || 120,\n        'data-keyboard': keyboard !== false ? 'true' : 'false',\n        'data-touch-ratio': touchRatio || 0.5,\n        // Navigation Colors\n        'data-arrow-background-color': arrowBackgroundColor || '#007cba',\n        'data-arrow-background-color-hover': arrowBackgroundColorHover || '#005a87',\n        'data-arrow-text-color': arrowTextColor || '#ffffff',\n        'data-dot-background-color': dotBackgroundColor || '#dddddd',\n        'data-dot-background-color-hover': dotBackgroundColorHover || '#00a0d2',\n        'data-dot-background-color-active': dotBackgroundColorActive || '#007cba',\n        // Tab Colors\n        'data-tab-text-color': tabTextColor || '#333333',\n        'data-tab-text-color-hover': tabTextColorHover || '#ffffff',\n        'data-tab-text-color-active': tabTextColorActive || '#ffffff',\n        'data-tab-background-color': tabBackgroundColor || '#f5f5f5',\n        'data-tab-background-color-hover': tabBackgroundColorHover || '#00a0d2',\n        'data-tab-background-color-active': tabBackgroundColorActive || '#007cba',\n        'data-tab-border-color': tabBorderColor || '#dddddd',\n        'data-tab-border-color-hover': tabBorderColorHover || '#00a0d2',\n        'data-tab-border-color-active': tabBorderColorActive || '#007cba'\n    });\n\n    const innerBlocksProps = useInnerBlocksProps(\n        { className: 'fsc-slider__frames' },\n        {\n            allowedBlocks: ALLOWED_BLOCKS,\n            template: TEMPLATE,\n            renderAppender: () => (\n                <div className=\"fsc-slider__add-frame\">\n                    <Button\n                        isPrimary\n                        onClick={() => {\n                            const newFrame = wp.blocks.createBlock('flexible-slider-carousel/frame', {});\n                            wp.data.dispatch('core/block-editor').insertBlock(newFrame, undefined, clientId);\n                        }}\n                    >\n                        {__('Add Frame', 'flexible-slider-carousel')}\n                    </Button>\n                </div>\n            )\n        }\n    );\n\n    // Get frame count for validation\n    const frameCount = useSelect(select => {\n        const block = select('core/block-editor').getBlock(clientId);\n        return block ? block.innerBlocks.length : 0;\n    }, [clientId]);\n\n    // Calculate current visible range for editor navigation\n    const getCurrentVisibleRange = () => {\n        const currentSlidesToShow = slidesToShow?.desktop || 1;\n        const startIndex = 0; // Editor always starts at 0\n        const endIndex = Math.min(startIndex + currentSlidesToShow - 1, Math.max(0, frameCount - 1));\n        return { startIndex, endIndex };\n    };\n\n    // Validate minimum frames\n    useEffect(() => {\n        if (frameCount < 1) {\n            setError(__('Slider must have at least one frame.', 'flexible-slider-carousel'));\n        } else {\n            setError('');\n        }\n    }, [frameCount]);\n\n    // Force re-render when tab styling attributes change\n    useEffect(() => {\n        // This will trigger a re-render when tab styling changes\n    }, [tabFontSize, tabFontWeight, tabTextAlign, tabPadding, tabBorderRadius, tabBorderWidth,\n        tabTextColor, tabTextColorHover, tabTextColorActive, tabBackgroundColor, tabBackgroundColorHover, tabBackgroundColorActive,\n        tabBorderColor, tabBorderColorHover, tabBorderColorActive, tabBoxShadow, tabBoxShadowActive]);\n\n    // Update CSS variables in editor when colors change\n    useEffect(() => {\n        console.log('🎨 Color useEffect triggered with:', {\n            arrowBackgroundColor,\n            arrowBackgroundColorHover,\n            arrowTextColor,\n            dotBackgroundColor,\n            dotBackgroundColorHover,\n            dotBackgroundColorActive,\n            tabBackgroundColor,\n            tabBackgroundColorHover,\n            tabBackgroundColorActive,\n            tabTextColor,\n            tabTextColorHover,\n            tabTextColorActive,\n            tabBorderColor,\n            tabBorderColorHover,\n            tabBorderColorActive\n        });\n\n        // Find the current slider block in the editor\n        const currentBlock = wp.data.select('core/block-editor').getBlock(clientId);\n        if (currentBlock) {\n            console.log('🔍 Current block found:', currentBlock);\n\n            // Find the DOM element for this specific block\n            const blockElement = document.querySelector(`[data-block=\"${clientId}\"]`);\n            console.log('🔍 Block element search result:', blockElement);\n\n            if (blockElement) {\n                console.log('🔍 Block element found, using it directly for CSS variables');\n\n                // The block element itself has all the data attributes, so use it directly\n                const sliderElement = blockElement; // Use the block element itself\n                console.log('🎯 Using block element as slider element:', sliderElement);\n\n                // Also find the frames container for additional CSS variable setting\n                const framesContainer = blockElement.querySelector('.fsc-slider__frames');\n\n                // Update arrow colors - set on both slider and frames container\n                if (arrowBackgroundColor) {\n                    sliderElement.style.setProperty('--arrow-background-color', arrowBackgroundColor, 'important');\n                    if (framesContainer) framesContainer.style.setProperty('--arrow-background-color', arrowBackgroundColor, 'important');\n                    console.log('✅ Set --arrow-background-color:', arrowBackgroundColor);\n\n                    // Also set directly on navigation elements\n                    const prevButton = blockElement.querySelector('.swiper-button-prev');\n                    const nextButton = blockElement.querySelector('.swiper-button-next');\n                    if (prevButton) prevButton.style.backgroundColor = arrowBackgroundColor;\n                    if (nextButton) nextButton.style.backgroundColor = arrowBackgroundColor;\n                    console.log('🎯 Set direct background on buttons:', arrowBackgroundColor);\n                }\n                if (arrowBackgroundColorHover) {\n                    sliderElement.style.setProperty('--arrow-background-color-hover', arrowBackgroundColorHover, 'important');\n                    if (framesContainer) framesContainer.style.setProperty('--arrow-background-color-hover', arrowBackgroundColorHover, 'important');\n                    console.log('✅ Set --arrow-background-color-hover:', arrowBackgroundColorHover);\n                }\n                if (arrowTextColor) {\n                    sliderElement.style.setProperty('--arrow-text-color', arrowTextColor, 'important');\n                    if (framesContainer) framesContainer.style.setProperty('--arrow-text-color', arrowTextColor, 'important');\n                    console.log('✅ Set --arrow-text-color:', arrowTextColor);\n\n                    // Also set directly on navigation elements\n                    const prevButton = blockElement.querySelector('.swiper-button-prev');\n                    const nextButton = blockElement.querySelector('.swiper-button-next');\n                    if (prevButton) prevButton.style.color = arrowTextColor;\n                    if (nextButton) nextButton.style.color = arrowTextColor;\n                    console.log('🎯 Set direct color on buttons:', arrowTextColor);\n                }\n\n                // Update dot colors - set on both slider and frames container\n                if (dotBackgroundColor) {\n                    sliderElement.style.setProperty('--dot-background-color', dotBackgroundColor, 'important');\n                    if (framesContainer) framesContainer.style.setProperty('--dot-background-color', dotBackgroundColor, 'important');\n                    console.log('✅ Set --dot-background-color:', dotBackgroundColor);\n                }\n                if (dotBackgroundColorHover) {\n                    sliderElement.style.setProperty('--dot-background-color-hover', dotBackgroundColorHover, 'important');\n                    if (framesContainer) framesContainer.style.setProperty('--dot-background-color-hover', dotBackgroundColorHover, 'important');\n                    console.log('✅ Set --dot-background-color-hover:', dotBackgroundColorHover);\n                }\n                if (dotBackgroundColorActive) {\n                    sliderElement.style.setProperty('--dot-background-color-active', dotBackgroundColorActive, 'important');\n                    if (framesContainer) framesContainer.style.setProperty('--dot-background-color-active', dotBackgroundColorActive, 'important');\n                    console.log('✅ Set --dot-background-color-active:', dotBackgroundColorActive);\n                }\n\n                // Update tab colors\n                if (tabBackgroundColor) {\n                    sliderElement.style.setProperty('--tab-background-color', tabBackgroundColor, 'important');\n                    console.log('✅ Set --tab-background-color:', tabBackgroundColor);\n                }\n                if (tabBackgroundColorHover) {\n                    sliderElement.style.setProperty('--tab-background-color-hover', tabBackgroundColorHover, 'important');\n                    console.log('✅ Set --tab-background-color-hover:', tabBackgroundColorHover);\n                }\n                if (tabBackgroundColorActive) {\n                    sliderElement.style.setProperty('--tab-background-color-active', tabBackgroundColorActive, 'important');\n                    console.log('✅ Set --tab-background-color-active:', tabBackgroundColorActive);\n                }\n                if (tabTextColor) {\n                    sliderElement.style.setProperty('--tab-text-color', tabTextColor, 'important');\n                    console.log('✅ Set --tab-text-color:', tabTextColor);\n                }\n                if (tabTextColorHover) {\n                    sliderElement.style.setProperty('--tab-text-color-hover', tabTextColorHover, 'important');\n                    console.log('✅ Set --tab-text-color-hover:', tabTextColorHover);\n                }\n                if (tabTextColorActive) {\n                    sliderElement.style.setProperty('--tab-text-color-active', tabTextColorActive, 'important');\n                    console.log('✅ Set --tab-text-color-active:', tabTextColorActive);\n                }\n                if (tabBorderColor) {\n                    sliderElement.style.setProperty('--tab-border-color', tabBorderColor, 'important');\n                    console.log('✅ Set --tab-border-color:', tabBorderColor);\n                }\n                if (tabBorderColorHover) {\n                    sliderElement.style.setProperty('--tab-border-color-hover', tabBorderColorHover, 'important');\n                    console.log('✅ Set --tab-border-color-hover:', tabBorderColorHover);\n                }\n                if (tabBorderColorActive) {\n                    sliderElement.style.setProperty('--tab-border-color-active', tabBorderColorActive, 'important');\n                    console.log('✅ Set --tab-border-color-active:', tabBorderColorActive);\n                }\n            } else {\n                console.log('❌ Block element not found for clientId:', clientId);\n            }\n        } else {\n            console.log('❌ Current block not found');\n        }\n    }, [\n        arrowBackgroundColor, arrowBackgroundColorHover, arrowTextColor,\n        dotBackgroundColor, dotBackgroundColorHover, dotBackgroundColorActive,\n        tabBackgroundColor, tabBackgroundColorHover, tabBackgroundColorActive,\n        tabTextColor, tabTextColorHover, tabTextColorActive, tabBorderColor, tabBorderColorHover, tabBorderColorActive\n    ]);\n\n    return (\n        <>\n            <BlockControls>\n                <AlignmentToolbar\n                    value={align}\n                    onChange={(newAlign) => setAttributes({ align: newAlign })}\n                />\n            </BlockControls>\n\n            <InspectorControls>\n                <PanelBody title={__('Slider Settings', 'flexible-slider-carousel')} initialOpen={true}>\n                    <SelectControl\n                        label={__('Slider Design', 'flexible-slider-carousel')}\n                        value={sliderDesign}\n                        options={[\n                            { label: __('Default', 'flexible-slider-carousel'), value: 'default' },\n                            { label: __('Minimal', 'flexible-slider-carousel'), value: 'minimal' },\n                            { label: __('Modern', 'flexible-slider-carousel'), value: 'modern' },\n                            { label: __('Classic', 'flexible-slider-carousel'), value: 'classic' },\n                            { label: __('Card', 'flexible-slider-carousel'), value: 'card' }\n                        ]}\n                        onChange={(value) => setAttributes({ sliderDesign: value })}\n                    />\n\n                    <div className=\"fsc-slider__info\">\n                        <p>{__('Add frames manually using the + button below to create your slider content.', 'flexible-slider-carousel')}</p>\n                    </div>\n                </PanelBody>\n\n                <PanelBody title={__('Animation & Behavior', 'flexible-slider-carousel')} initialOpen={false}>\n                    <ToggleControl\n                        label={__('Auto Play', 'flexible-slider-carousel')}\n                        checked={autoPlay}\n                        onChange={(value) => setAttributes({ autoPlay: value })}\n                    />\n\n                    {autoPlay && (\n                        <RangeControl\n                            label={__('Auto Play Speed (seconds)', 'flexible-slider-carousel')}\n                            value={autoPlaySpeed}\n                            onChange={(value) => setAttributes({ autoPlaySpeed: value })}\n                            min={1}\n                            max={10}\n                            step={0.5}\n                        />\n                    )}\n\n                    <ToggleControl\n                        label={__('Touch/Swipe Support', 'flexible-slider-carousel')}\n                        checked={touchSwipe}\n                        onChange={(value) => setAttributes({ touchSwipe: value })}\n                    />\n\n                    <SelectControl\n                        label={__('Slider Type', 'flexible-slider-carousel')}\n                        value={sliderType || 'carousel'}\n                        options={[\n                            { label: __('Carousel (Endless Loop)', 'flexible-slider-carousel'), value: 'carousel' },\n                            { label: __('Slider (Finite)', 'flexible-slider-carousel'), value: 'slider' }\n                        ]}\n                        onChange={(value) => setAttributes({ sliderType: value })}\n                        help={__('Carousel loops endlessly, Slider stops at boundaries (Standard: Carousel)', 'flexible-slider-carousel')}\n                    />\n\n                    <RangeControl\n                        label={__('Gap Between Frames (px)', 'flexible-slider-carousel')}\n                        value={gap || 10}\n                        onChange={(value) => setAttributes({ gap: value })}\n                        min={0}\n                        max={50}\n                        step={1}\n                        help={__('Standard: 10px', 'flexible-slider-carousel')}\n                    />\n\n                    <RangeControl\n                        label={__('Animation Duration (ms)', 'flexible-slider-carousel')}\n                        value={animationDuration || 400}\n                        onChange={(value) => setAttributes({ animationDuration: value })}\n                        min={100}\n                        max={2000}\n                        step={50}\n                        help={__('Standard: 400ms', 'flexible-slider-carousel')}\n                    />\n\n                    <SelectControl\n                        label={__('Animation Timing Function', 'flexible-slider-carousel')}\n                        value={animationTimingFunc || 'cubic-bezier(0.165, 0.840, 0.440, 1.000)'}\n                        options={[\n                            { label: __('Default (Smooth)', 'flexible-slider-carousel'), value: 'cubic-bezier(0.165, 0.840, 0.440, 1.000)' },\n                            { label: __('Linear', 'flexible-slider-carousel'), value: 'linear' },\n                            { label: __('Ease', 'flexible-slider-carousel'), value: 'ease' },\n                            { label: __('Ease-in', 'flexible-slider-carousel'), value: 'ease-in' },\n                            { label: __('Ease-out', 'flexible-slider-carousel'), value: 'ease-out' },\n                            { label: __('Ease-in-out', 'flexible-slider-carousel'), value: 'ease-in-out' }\n                        ]}\n                        onChange={(value) => setAttributes({ animationTimingFunc: value })}\n                        help={__('Standard: Default (Smooth)', 'flexible-slider-carousel')}\n                    />\n\n                    <SelectControl\n                        label={__('Animation Type', 'flexible-slider-carousel')}\n                        value={animationType || 'slide'}\n                        options={[\n                            { label: __('Slide (Standard)', 'flexible-slider-carousel'), value: 'slide' },\n                            { label: __('Fade', 'flexible-slider-carousel'), value: 'fade' },\n                            { label: __('Flip', 'flexible-slider-carousel'), value: 'flip' },\n                            { label: __('Coverflow', 'flexible-slider-carousel'), value: 'coverflow' },\n                            { label: __('Creative', 'flexible-slider-carousel'), value: 'creative' }\n                        ]}\n                        onChange={(value) => setAttributes({ animationType: value })}\n                        help={__('Art der Slide-Animation (Standard: Slide)', 'flexible-slider-carousel')}\n                    />\n\n                    {animationType === 'slide' && (\n                        <SelectControl\n                            label={__('Animation Direction', 'flexible-slider-carousel')}\n                            value={animationDirection || 'horizontal'}\n                            options={[\n                                { label: __('Horizontal (Standard)', 'flexible-slider-carousel'), value: 'horizontal' },\n                                { label: __('Vertical', 'flexible-slider-carousel'), value: 'vertical' },\n                                { label: __('Diagonal Left', 'flexible-slider-carousel'), value: 'diagonal-left' },\n                                { label: __('Diagonal Right', 'flexible-slider-carousel'), value: 'diagonal-right' }\n                            ]}\n                            onChange={(value) => setAttributes({ animationDirection: value })}\n                            help={__('Richtung der Slide-Bewegung (Standard: Horizontal)', 'flexible-slider-carousel')}\n                        />\n                    )}\n\n                    {(animationType === 'flip' || animationType === 'cube' || animationType === 'coverflow' || animationType === 'creative') && (\n                        <RangeControl\n                            label={__('Animation Intensity', 'flexible-slider-carousel')}\n                            value={animationIntensity || 50}\n                            onChange={(value) => setAttributes({ animationIntensity: value })}\n                            min={10}\n                            max={100}\n                            step={5}\n                            help={__('Stärke des 3D-Effekts (Standard: 50)', 'flexible-slider-carousel')}\n                        />\n                    )}\n\n                    <SelectControl\n                        label={__('Focus Position', 'flexible-slider-carousel')}\n                        value={focusAt || '0'}\n                        options={[\n                            { label: __('Left (0)', 'flexible-slider-carousel'), value: '0' },\n                            { label: __('Center', 'flexible-slider-carousel'), value: 'center' }\n                        ]}\n                        onChange={(value) => setAttributes({ focusAt: value })}\n                        help={__('Position of active slide in viewport (Standard: Left)', 'flexible-slider-carousel')}\n                    />\n\n                    <RangeControl\n                        label={__('Peek Distance (px)', 'flexible-slider-carousel')}\n                        value={peek || 0}\n                        onChange={(value) => setAttributes({ peek: value })}\n                        min={0}\n                        max={100}\n                        step={5}\n                        help={__('Show part of next/previous slides (Standard: 0px)', 'flexible-slider-carousel')}\n                    />\n\n                    <ToggleControl\n                        label={__('Keyboard Navigation', 'flexible-slider-carousel')}\n                        checked={keyboard !== false}\n                        onChange={(value) => setAttributes({ keyboard: value })}\n                        help={__('Use arrow keys to navigate (Standard: Aktiviert)', 'flexible-slider-carousel')}\n                    />\n\n                    <RangeControl\n                        label={__('Touch/Swipe Sensitivity', 'flexible-slider-carousel')}\n                        value={touchRatio || 0.5}\n                        onChange={(value) => setAttributes({ touchRatio: value })}\n                        min={0.1}\n                        max={2.0}\n                        step={0.1}\n                        help={__('Higher values = more sensitive touch/swipe (Standard: 0.5)', 'flexible-slider-carousel')}\n                    />\n\n                    <div style={{ marginTop: '20px', paddingTop: '20px', borderTop: '1px solid #ddd' }}>\n                        <Button\n                            isSecondary\n                            onClick={() => {\n                                setAttributes({\n                                    // Swiper.js settings\n                                    sliderType: 'carousel',\n                                    gap: 15,\n                                    animationDuration: 800,\n                                    animationTimingFunc: 'cubic-bezier(0.165, 0.840, 0.440, 1.000)',\n                                    animationType: 'slide',\n                                    animationDirection: 'horizontal',\n                                    animationIntensity: 50,\n                                    focusAt: 'center',\n                                    peek: 120,\n                                    keyboard: true,\n                                    touchRatio: 0.5\n                                });\n                            }}\n                            style={{ width: '100%' }}\n                        >\n                            {__('Auf Standardwerte zurücksetzen', 'flexible-slider-carousel')}\n                        </Button>\n                        <p style={{ fontSize: '12px', color: '#666', marginTop: '8px', textAlign: 'center' }}>\n                            {__('Setzt alle Glide.js Optionen auf Standardwerte zurück', 'flexible-slider-carousel')}\n                        </p>\n                    </div>\n                </PanelBody>\n\n                <PanelBody title={__('Navigation', 'flexible-slider-carousel')} initialOpen={false}>\n                    <ToggleControl\n                        label={__('Navigation Arrows', 'flexible-slider-carousel')}\n                        checked={showNavigation}\n                        onChange={(value) => setAttributes({ showNavigation: value })}\n                    />\n\n                    <ToggleControl\n                        label={__('Navigation Dots', 'flexible-slider-carousel')}\n                        checked={showDots}\n                        onChange={(value) => setAttributes({ showDots: value })}\n                    />\n\n                    <ToggleControl\n                        label={__('Text Navigation', 'flexible-slider-carousel')}\n                        checked={showTextNavigation}\n                        onChange={(value) => setAttributes({ showTextNavigation: value })}\n                        help={__('Show frame titles as navigation tabs', 'flexible-slider-carousel')}\n                    />\n\n                    {showTextNavigation && (\n                        <SelectControl\n                            label={__('Text Navigation Position', 'flexible-slider-carousel')}\n                            value={textNavigationPosition}\n                            options={[\n                                { label: __('Above Slider', 'flexible-slider-carousel'), value: 'above' },\n                                { label: __('Below Slider', 'flexible-slider-carousel'), value: 'below' }\n                            ]}\n                            onChange={(value) => setAttributes({ textNavigationPosition: value })}\n                        />\n                    )}\n\n                    {showTextNavigation && (\n                        <>\n                            <PanelBody title={__('Tab Typography', 'flexible-slider-carousel')} initialOpen={false}>\n                                <SelectControl\n                                    label={__('Text Align', 'flexible-slider-carousel')}\n                                    value={tabTextAlign}\n                                    options={[\n                                        { label: __('Left', 'flexible-slider-carousel'), value: 'left' },\n                                        { label: __('Center', 'flexible-slider-carousel'), value: 'center' },\n                                        { label: __('Right', 'flexible-slider-carousel'), value: 'right' }\n                                    ]}\n                                    onChange={(value) => setAttributes({ tabTextAlign: value })}\n                                />\n\n                                <RangeControl\n                                    label={__('Font Size (px)', 'flexible-slider-carousel')}\n                                    value={tabFontSize}\n                                    onChange={(value) => setAttributes({ tabFontSize: value })}\n                                    min={12}\n                                    max={48}\n                                    step={1}\n                                />\n\n                                <SelectControl\n                                    label={__('Font Weight', 'flexible-slider-carousel')}\n                                    value={tabFontWeight}\n                                    options={[\n                                        { label: __('Normal', 'flexible-slider-carousel'), value: 'normal' },\n                                        { label: __('Bold', 'flexible-slider-carousel'), value: 'bold' },\n                                        { label: __('Light', 'flexible-slider-carousel'), value: '300' },\n                                        { label: __('Medium', 'flexible-slider-carousel'), value: '500' },\n                                        { label: __('Semi Bold', 'flexible-slider-carousel'), value: '600' }\n                                    ]}\n                                    onChange={(value) => setAttributes({ tabFontWeight: value })}\n                                />\n                            </PanelBody>\n\n                            <PanelBody title={__('Tab Colors - Normal State', 'flexible-slider-carousel')} initialOpen={false}>\n                                <div className=\"fsc-color-control\">\n                                    <label className=\"components-base-control__label\">{__('Text Color', 'flexible-slider-carousel')}</label>\n                                    <div className=\"fsc-color-indicator-wrapper\">\n                                        <ColorIndicator\n                                            colorValue={tabTextColor}\n                                            onClick={() => setActiveColorPicker('tabTextColor')}\n                                        />\n                                        <Button\n                                            className=\"fsc-color-button\"\n                                            onClick={() => setAttributes({ tabTextColor: undefined })}\n                                        >\n                                            {__('Clear', 'flexible-slider-carousel')}\n                                        </Button>\n                                    </div>\n                                    {activeColorPicker === 'tabTextColor' && (\n                                        <Popover\n                                            position=\"bottom center\"\n                                            onClose={() => setActiveColorPicker(null)}\n                                        >\n                                            <ColorPalette\n                                                value={tabTextColor}\n                                                onChange={(color) => {\n                                                    setAttributes({ tabTextColor: color });\n                                                    setActiveColorPicker(null);\n                                                }}\n                                            />\n                                        </Popover>\n                                    )}\n                                </div>\n\n                                <div className=\"fsc-color-control\">\n                                    <label className=\"components-base-control__label\">{__('Background Color', 'flexible-slider-carousel')}</label>\n                                    <div className=\"fsc-color-indicator-wrapper\">\n                                        <ColorIndicator\n                                            colorValue={tabBackgroundColor}\n                                            onClick={() => setActiveColorPicker('tabBackgroundColor')}\n                                        />\n                                        <Button\n                                            className=\"fsc-color-button\"\n                                            onClick={() => setAttributes({ tabBackgroundColor: undefined })}\n                                        >\n                                            {__('Clear', 'flexible-slider-carousel')}\n                                        </Button>\n                                    </div>\n                                    {activeColorPicker === 'tabBackgroundColor' && (\n                                        <Popover\n                                            position=\"bottom center\"\n                                            onClose={() => setActiveColorPicker(null)}\n                                        >\n                                            <ColorPalette\n                                                value={tabBackgroundColor}\n                                                onChange={(color) => {\n                                                    setAttributes({ tabBackgroundColor: color });\n                                                    setActiveColorPicker(null);\n                                                }}\n                                            />\n                                        </Popover>\n                                    )}\n                                </div>\n\n                                <div className=\"fsc-color-control\">\n                                    <label className=\"components-base-control__label\">{__('Border Color', 'flexible-slider-carousel')}</label>\n                                    <div className=\"fsc-color-indicator-wrapper\">\n                                        <ColorIndicator\n                                            colorValue={tabBorderColor}\n                                            onClick={() => setActiveColorPicker('tabBorderColor')}\n                                        />\n                                        <Button\n                                            className=\"fsc-color-button\"\n                                            onClick={() => setAttributes({ tabBorderColor: undefined })}\n                                        >\n                                            {__('Clear', 'flexible-slider-carousel')}\n                                        </Button>\n                                    </div>\n                                    {activeColorPicker === 'tabBorderColor' && (\n                                        <Popover\n                                            position=\"bottom center\"\n                                            onClose={() => setActiveColorPicker(null)}\n                                        >\n                                            <ColorPalette\n                                                value={tabBorderColor}\n                                                onChange={(color) => {\n                                                    setAttributes({ tabBorderColor: color });\n                                                    setActiveColorPicker(null);\n                                                }}\n                                            />\n                                        </Popover>\n                                    )}\n                                </div>\n                            </PanelBody>\n\n                            <PanelBody title={__('Tab Colors - Active State', 'flexible-slider-carousel')} initialOpen={false}>\n                                <div className=\"fsc-color-control\">\n                                    <label className=\"components-base-control__label\">{__('Text Color (Active)', 'flexible-slider-carousel')}</label>\n                                    <div className=\"fsc-color-indicator-wrapper\">\n                                        <ColorIndicator\n                                            colorValue={tabTextColorActive}\n                                            onClick={() => setActiveColorPicker('tabTextColorActive')}\n                                        />\n                                        <Button\n                                            className=\"fsc-color-button\"\n                                            onClick={() => setAttributes({ tabTextColorActive: undefined })}\n                                        >\n                                            {__('Clear', 'flexible-slider-carousel')}\n                                        </Button>\n                                    </div>\n                                    {activeColorPicker === 'tabTextColorActive' && (\n                                        <Popover\n                                            position=\"bottom center\"\n                                            onClose={() => setActiveColorPicker(null)}\n                                        >\n                                            <ColorPalette\n                                                value={tabTextColorActive}\n                                                onChange={(color) => {\n                                                    setAttributes({ tabTextColorActive: color });\n                                                    setActiveColorPicker(null);\n                                                }}\n                                            />\n                                        </Popover>\n                                    )}\n                                </div>\n\n                                <div className=\"fsc-color-control\">\n                                    <label className=\"components-base-control__label\">{__('Background Color (Active)', 'flexible-slider-carousel')}</label>\n                                    <div className=\"fsc-color-indicator-wrapper\">\n                                        <ColorIndicator\n                                            colorValue={tabBackgroundColorActive}\n                                            onClick={() => setActiveColorPicker('tabBackgroundColorActive')}\n                                        />\n                                        <Button\n                                            className=\"fsc-color-button\"\n                                            onClick={() => setAttributes({ tabBackgroundColorActive: undefined })}\n                                        >\n                                            {__('Clear', 'flexible-slider-carousel')}\n                                        </Button>\n                                    </div>\n                                    {activeColorPicker === 'tabBackgroundColorActive' && (\n                                        <Popover\n                                            position=\"bottom center\"\n                                            onClose={() => setActiveColorPicker(null)}\n                                        >\n                                            <ColorPalette\n                                                value={tabBackgroundColorActive}\n                                                onChange={(color) => {\n                                                    setAttributes({ tabBackgroundColorActive: color });\n                                                    setActiveColorPicker(null);\n                                                }}\n                                            />\n                                        </Popover>\n                                    )}\n                                </div>\n\n                                <div className=\"fsc-color-control\">\n                                    <label className=\"components-base-control__label\">{__('Border Color (Active)', 'flexible-slider-carousel')}</label>\n                                    <div className=\"fsc-color-indicator-wrapper\">\n                                        <ColorIndicator\n                                            colorValue={tabBorderColorActive}\n                                            onClick={() => setActiveColorPicker('tabBorderColorActive')}\n                                        />\n                                        <Button\n                                            className=\"fsc-color-button\"\n                                            onClick={() => setAttributes({ tabBorderColorActive: undefined })}\n                                        >\n                                            {__('Clear', 'flexible-slider-carousel')}\n                                        </Button>\n                                    </div>\n                                    {activeColorPicker === 'tabBorderColorActive' && (\n                                        <Popover\n                                            position=\"bottom center\"\n                                            onClose={() => setActiveColorPicker(null)}\n                                        >\n                                            <ColorPalette\n                                                value={tabBorderColorActive}\n                                                onChange={(color) => {\n                                                    setAttributes({ tabBorderColorActive: color });\n                                                    setActiveColorPicker(null);\n                                                }}\n                                            />\n                                        </Popover>\n                                    )}\n                                </div>\n                            </PanelBody>\n\n                            <PanelBody title={__('Tab Layout & Effects', 'flexible-slider-carousel')} initialOpen={false}>\n                                <RangeControl\n                                    label={__('Padding (px)', 'flexible-slider-carousel')}\n                                    value={tabPadding}\n                                    onChange={(value) => setAttributes({ tabPadding: value })}\n                                    min={0}\n                                    max={40}\n                                    step={1}\n                                />\n\n                                <RangeControl\n                                    label={__('Border Radius (px)', 'flexible-slider-carousel')}\n                                    value={tabBorderRadius}\n                                    onChange={(value) => setAttributes({ tabBorderRadius: value })}\n                                    min={0}\n                                    max={20}\n                                    step={1}\n                                />\n\n                                <RangeControl\n                                    label={__('Border Width (px)', 'flexible-slider-carousel')}\n                                    value={tabBorderWidth}\n                                    onChange={(value) => setAttributes({ tabBorderWidth: value })}\n                                    min={0}\n                                    max={10}\n                                    step={1}\n                                />\n\n                                <TextControl\n                                    label={__('Box Shadow', 'flexible-slider-carousel')}\n                                    value={tabBoxShadow}\n                                    onChange={(value) => setAttributes({ tabBoxShadow: value })}\n                                    placeholder=\"0 2px 4px rgba(0,0,0,0.1)\"\n                                    help={__('CSS box-shadow value (e.g., 0 2px 4px rgba(0,0,0,0.1))', 'flexible-slider-carousel')}\n                                />\n\n                                <TextControl\n                                    label={__('Box Shadow (Active)', 'flexible-slider-carousel')}\n                                    value={tabBoxShadowActive}\n                                    onChange={(value) => setAttributes({ tabBoxShadowActive: value })}\n                                    placeholder=\"0 4px 8px rgba(0,0,0,0.2)\"\n                                    help={__('CSS box-shadow value for active state', 'flexible-slider-carousel')}\n                                />\n                            </PanelBody>\n                        </>\n                    )}\n\n                    <PanelBody title={__('Navigation Colors', 'flexible-slider-carousel')} initialOpen={false}>\n                        <h4>{__('Arrow Colors', 'flexible-slider-carousel')}</h4>\n\n                        <div className=\"fsc-color-control\">\n                            <label className=\"components-base-control__label\">{__('Background Color', 'flexible-slider-carousel')}</label>\n                            <div className=\"fsc-color-indicator-wrapper\">\n                                <ColorIndicator\n                                    colorValue={arrowBackgroundColor}\n                                    onClick={() => setActiveColorPicker('arrowBackgroundColor')}\n                                />\n                                <Button\n                                    className=\"fsc-color-button\"\n                                    onClick={() => setAttributes({ arrowBackgroundColor: undefined })}\n                                >\n                                    {__('Clear', 'flexible-slider-carousel')}\n                                </Button>\n                            </div>\n                            {activeColorPicker === 'arrowBackgroundColor' && (\n                                <Popover\n                                    position=\"bottom center\"\n                                    onClose={() => setActiveColorPicker(null)}\n                                >\n                                    <ColorPalette\n                                        value={arrowBackgroundColor}\n                                        onChange={(color) => {\n                                            setAttributes({ arrowBackgroundColor: color });\n                                            setActiveColorPicker(null);\n                                        }}\n                                    />\n                                </Popover>\n                            )}\n                        </div>\n\n                        <div className=\"fsc-color-control\">\n                            <label className=\"components-base-control__label\">{__('Background Color (Hover)', 'flexible-slider-carousel')}</label>\n                            <div className=\"fsc-color-indicator-wrapper\">\n                                <ColorIndicator\n                                    colorValue={arrowBackgroundColorHover}\n                                    onClick={() => setActiveColorPicker('arrowBackgroundColorHover')}\n                                />\n                                <Button\n                                    className=\"fsc-color-button\"\n                                    onClick={() => setAttributes({ arrowBackgroundColorHover: undefined })}\n                                >\n                                    {__('Clear', 'flexible-slider-carousel')}\n                                </Button>\n                            </div>\n                            {activeColorPicker === 'arrowBackgroundColorHover' && (\n                                <Popover\n                                    position=\"bottom center\"\n                                    onClose={() => setActiveColorPicker(null)}\n                                >\n                                    <ColorPalette\n                                        value={arrowBackgroundColorHover}\n                                        onChange={(color) => {\n                                            setAttributes({ arrowBackgroundColorHover: color });\n                                            setActiveColorPicker(null);\n                                        }}\n                                    />\n                                </Popover>\n                            )}\n                        </div>\n\n                        <div className=\"fsc-color-control\">\n                            <label className=\"components-base-control__label\">{__('Arrow Color', 'flexible-slider-carousel')}</label>\n                            <div className=\"fsc-color-indicator-wrapper\">\n                                <ColorIndicator\n                                    colorValue={arrowTextColor}\n                                    onClick={() => setActiveColorPicker('arrowTextColor')}\n                                />\n                                <Button\n                                    className=\"fsc-color-button\"\n                                    onClick={() => setAttributes({ arrowTextColor: undefined })}\n                                >\n                                    {__('Clear', 'flexible-slider-carousel')}\n                                </Button>\n                            </div>\n                            {activeColorPicker === 'arrowTextColor' && (\n                                <Popover\n                                    position=\"bottom center\"\n                                    onClose={() => setActiveColorPicker(null)}\n                                >\n                                    <ColorPalette\n                                        value={arrowTextColor}\n                                        onChange={(color) => {\n                                            setAttributes({ arrowTextColor: color });\n                                            setActiveColorPicker(null);\n                                        }}\n                                    />\n                                </Popover>\n                            )}\n                        </div>\n\n                        <h4>{__('Dot Colors', 'flexible-slider-carousel')}</h4>\n\n                        <div className=\"fsc-color-control\">\n                            <label className=\"components-base-control__label\">{__('Background Color (Normal)', 'flexible-slider-carousel')}</label>\n                            <div className=\"fsc-color-indicator-wrapper\">\n                                <ColorIndicator\n                                    colorValue={dotBackgroundColor}\n                                    onClick={() => setActiveColorPicker('dotBackgroundColor')}\n                                />\n                                <Button\n                                    className=\"fsc-color-button\"\n                                    onClick={() => setAttributes({ dotBackgroundColor: undefined })}\n                                >\n                                    {__('Clear', 'flexible-slider-carousel')}\n                                </Button>\n                            </div>\n                            {activeColorPicker === 'dotBackgroundColor' && (\n                                <Popover\n                                    position=\"bottom center\"\n                                    onClose={() => setActiveColorPicker(null)}\n                                >\n                                    <ColorPalette\n                                        value={dotBackgroundColor}\n                                        onChange={(color) => {\n                                            setAttributes({ dotBackgroundColor: color });\n                                            setActiveColorPicker(null);\n                                        }}\n                                    />\n                                </Popover>\n                            )}\n                        </div>\n\n                        <div className=\"fsc-color-control\">\n                            <label className=\"components-base-control__label\">{__('Background Color (Hover)', 'flexible-slider-carousel')}</label>\n                            <div className=\"fsc-color-indicator-wrapper\">\n                                <ColorIndicator\n                                    colorValue={dotBackgroundColorHover}\n                                    onClick={() => setActiveColorPicker('dotBackgroundColorHover')}\n                                />\n                                <Button\n                                    className=\"fsc-color-button\"\n                                    onClick={() => setAttributes({ dotBackgroundColorHover: undefined })}\n                                >\n                                    {__('Clear', 'flexible-slider-carousel')}\n                                </Button>\n                            </div>\n                            {activeColorPicker === 'dotBackgroundColorHover' && (\n                                <Popover\n                                    position=\"bottom center\"\n                                    onClose={() => setActiveColorPicker(null)}\n                                >\n                                    <ColorPalette\n                                        value={dotBackgroundColorHover}\n                                        onChange={(color) => {\n                                            setAttributes({ dotBackgroundColorHover: color });\n                                            setActiveColorPicker(null);\n                                        }}\n                                    />\n                                </Popover>\n                            )}\n                        </div>\n\n                        <div className=\"fsc-color-control\">\n                            <label className=\"components-base-control__label\">{__('Background Color (Active)', 'flexible-slider-carousel')}</label>\n                            <div className=\"fsc-color-indicator-wrapper\">\n                                <ColorIndicator\n                                    colorValue={dotBackgroundColorActive}\n                                    onClick={() => setActiveColorPicker('dotBackgroundColorActive')}\n                                />\n                                <Button\n                                    className=\"fsc-color-button\"\n                                    onClick={() => setAttributes({ dotBackgroundColorActive: undefined })}\n                                >\n                                    {__('Clear', 'flexible-slider-carousel')}\n                                </Button>\n                            </div>\n                            {activeColorPicker === 'dotBackgroundColorActive' && (\n                                <Popover\n                                    position=\"bottom center\"\n                                    onClose={() => setActiveColorPicker(null)}\n                                >\n                                    <ColorPalette\n                                        value={dotBackgroundColorActive}\n                                        onChange={(color) => {\n                                            setAttributes({ dotBackgroundColorActive: color });\n                                            setActiveColorPicker(null);\n                                        }}\n                                    />\n                                </Popover>\n                            )}\n                        </div>\n                    </PanelBody>\n\n                </PanelBody>\n\n                <PanelBody title={__('Performance & SEO', 'flexible-slider-carousel')} initialOpen={false}>\n                    <ToggleControl\n                        label={__('Lazy Loading', 'flexible-slider-carousel')}\n                        checked={loading}\n                        onChange={(value) => setAttributes({ loading: value })}\n                    />\n\n                    <ToggleControl\n                        label={__('Intersection Observer', 'flexible-slider-carousel')}\n                        checked={intersectionObserver}\n                        onChange={(value) => setAttributes({ intersectionObserver: value })}\n                        help={__('Only load slider when it comes into view', 'flexible-slider-carousel')}\n                    />\n                </PanelBody>\n\n                <PanelBody title={__('Responsive Settings', 'flexible-slider-carousel')} initialOpen={false}>\n                    <ResponsiveSettings\n                        settings={responsiveSettings}\n                        slidesToShow={attributes.slidesToShow}\n                        slidesToScroll={attributes.slidesToScroll}\n                        onChange={(settings) => setAttributes({ responsiveSettings: settings })}\n                        onSlidesToShowChange={(slidesToShow) => setAttributes({ slidesToShow })}\n                        onSlidesToScrollChange={(slidesToScroll) => setAttributes({ slidesToScroll })}\n                        previewBreakpoint={previewBreakpoint}\n                        onPreviewBreakpointChange={setPreviewBreakpoint}\n                    />\n                </PanelBody>\n\n\n            </InspectorControls>\n\n            <div {...blockProps}>\n                {error && (\n                    <Notice status=\"error\" isDismissible={false}>\n                        {error}\n                    </Notice>\n                )}\n\n                {/* Text Navigation Above Slider */}\n                {showTextNavigation && textNavigationPosition === 'above' && (\n                    <div className=\"fsc-slider__text-nav-editor fsc-slider__text-nav-editor--above\">\n                        <div className=\"fsc-slider__frame-titles-editor\">\n                            {Array.from({ length: Math.max(1, frameCount) }, (_, i) => {\n                                const frameBlock = wp.data.select('core/block-editor').getBlock(clientId)?.innerBlocks[i];\n                                const frameTitle = frameBlock?.attributes?.frameTitle;\n                                const title = frameTitle ||\n                                    frameBlock?.attributes?.content?.replace(/<[^>]*>/g, '').substring(0, 20) ||\n                                    `${__('Frame', 'flexible-slider-carousel')} ${i + 1}`;\n\n                                const { startIndex, endIndex } = getCurrentVisibleRange();\n                                const isInRange = i >= startIndex && i <= endIndex;\n\n                                return (\n                                    <button\n                                        key={i}\n                                        className={`fsc-slider__frame-title-editor ${isInRange ? 'fsc-slider__frame-title-editor--active' : ''}`}\n                                        style={{\n                                            fontSize: `${tabFontSize}px`,\n                                            fontWeight: tabFontWeight,\n                                            textAlign: tabTextAlign,\n                                            padding: `${tabPadding}px`,\n                                            borderRadius: `${tabBorderRadius}px`,\n                                            borderWidth: `${tabBorderWidth}px`,\n                                            borderStyle: 'solid',\n                                            color: isInRange ? tabTextColorActive : tabTextColor,\n                                            backgroundColor: isInRange ? tabBackgroundColorActive : tabBackgroundColor,\n                                            borderColor: isInRange ? tabBorderColorActive : tabBorderColor,\n                                            boxShadow: isInRange ? tabBoxShadowActive : tabBoxShadow\n                                        }}\n                                        onClick={() => {\n                                            const framesContainer = document.querySelector(`[data-block=\"${clientId}\"] .fsc-slider__frames`);\n                                            if (framesContainer) {\n                                                const frameWidth = framesContainer.querySelector('.fsc-frame')?.offsetWidth || 0;\n                                                const gap = 20;\n                                                framesContainer.scrollLeft = i * (frameWidth + gap);\n                                            }\n                                        }}\n                                    >\n                                        {title}\n                                    </button>\n                                );\n                            })}\n                        </div>\n                    </div>\n                )}\n\n                <div className=\"fsc-slider__preview\">\n                    <div className=\"fsc-slider__preview-header\">\n                        <h4>{__('Slider Preview', 'flexible-slider-carousel')}</h4>\n                        <div className=\"fsc-slider__preview-badges\">\n                            <span className=\"fsc-slider__badge fsc-slider__badge--design\">\n                                {sliderDesign ? sliderDesign.charAt(0).toUpperCase() + sliderDesign.slice(1) : 'Default'}\n                            </span>\n                        </div>\n                    </div>\n\n                    <div className=\"fsc-slider__preview-content\">\n                        <div className=\"fsc-slider__frames-container\">\n                            <div {...innerBlocksProps} />\n\n                            {/* Editor Navigation Arrows - Only show if enabled */}\n                            {showNavigation && (\n                                <>\n                                    <button\n                                        className=\"swiper-button-prev\"\n                                        style={{\n                                            backgroundColor: arrowBackgroundColor || '#007cba',\n                                            color: arrowTextColor || '#ffffff'\n                                        }}\n                                        onClick={() => {\n                                            const framesContainer = document.querySelector(`[data-block=\"${clientId}\"] .fsc-slider__frames`);\n                                            if (framesContainer) {\n                                                const frameWidth = framesContainer.querySelector('.fsc-frame')?.offsetWidth || 0;\n                                                const gap = 20;\n                                                framesContainer.scrollLeft -= (frameWidth + gap);\n                                            }\n                                        }}\n                                    >\n                                        ‹\n                                    </button>\n\n                                    <button\n                                        className=\"swiper-button-next\"\n                                        style={{\n                                            backgroundColor: arrowBackgroundColor || '#007cba',\n                                            color: arrowTextColor || '#ffffff'\n                                        }}\n                                        onClick={() => {\n                                            const framesContainer = document.querySelector(`[data-block=\"${clientId}\"] .fsc-slider__frames`);\n                                            if (framesContainer) {\n                                                const frameWidth = framesContainer.querySelector('.fsc-frame')?.offsetWidth || 0;\n                                                const gap = 20;\n                                                framesContainer.scrollLeft += (frameWidth + gap);\n                                            }\n                                        }}\n                                    >\n                                        ›\n                                    </button>\n                                </>\n                            )}\n                        </div>\n\n                        {/* Editor Navigation Dots - Only show if enabled */}\n                        {showDots && (\n                            <div className=\"swiper-pagination\">\n                                {Array.from({ length: Math.max(1, frameCount) }, (_, i) => {\n                                    const { startIndex, endIndex } = getCurrentVisibleRange();\n                                    const isInRange = i >= startIndex && i <= endIndex;\n\n                                    return (\n                                        <button\n                                            key={i}\n                                            className={`swiper-pagination-bullet ${isInRange ? 'swiper-pagination-bullet-active' : ''}`}\n                                            style={{\n                                                backgroundColor: isInRange ? (dotBackgroundColorActive || '#007cba') : (dotBackgroundColor || '#dddddd')\n                                            }}\n                                            onClick={() => {\n                                                const framesContainer = document.querySelector(`[data-block=\"${clientId}\"] .fsc-slider__frames`);\n                                                if (framesContainer) {\n                                                    const frameWidth = framesContainer.querySelector('.fsc-frame')?.offsetWidth || 0;\n                                                    const gap = 20;\n                                                    framesContainer.scrollLeft = i * (frameWidth + gap);\n                                                }\n                                            }}\n                                        />\n                                    );\n                                })}\n                            </div>\n                        )}\n\n                        {/* Editor Text Navigation Below Slider */}\n                        {showTextNavigation && textNavigationPosition === 'below' && (\n                            <div className=\"fsc-slider__text-nav-editor fsc-slider__text-nav-editor--below\">\n                                <div className=\"fsc-slider__frame-titles-editor\">\n                                    {Array.from({ length: Math.max(1, frameCount) }, (_, i) => {\n                                        const frameBlock = wp.data.select('core/block-editor').getBlock(clientId)?.innerBlocks[i];\n                                        const frameTitle = frameBlock?.attributes?.frameTitle;\n                                        const title = frameTitle ||\n                                            frameBlock?.attributes?.content?.replace(/<[^>]*>/g, '').substring(0, 20) ||\n                                            `${__('Frame', 'flexible-slider-carousel')} ${i + 1}`;\n\n                                        const { startIndex, endIndex } = getCurrentVisibleRange();\n                                        const isInRange = i >= startIndex && i <= endIndex;\n\n                                        return (\n                                            <button\n                                                key={i}\n                                                className={`fsc-slider__frame-title-editor ${isInRange ? 'fsc-slider__frame-title-editor--active' : ''}`}\n                                                style={{\n                                                    fontSize: `${tabFontSize}px`,\n                                                    fontWeight: tabFontWeight,\n                                                    textAlign: tabTextAlign,\n                                                    padding: `${tabPadding}px`,\n                                                    borderRadius: `${tabBorderRadius}px`,\n                                                    borderWidth: `${tabBorderWidth}px`,\n                                                    borderStyle: 'solid',\n                                                    color: isInRange ? tabTextColorActive : tabTextColor,\n                                                    backgroundColor: isInRange ? tabBackgroundColorActive : tabBackgroundColor,\n                                                    borderColor: isInRange ? tabBorderColorActive : tabBorderColor,\n                                                    boxShadow: isInRange ? tabBoxShadowActive : tabBoxShadow\n                                                }}\n                                                onClick={() => {\n                                                    const framesContainer = document.querySelector(`[data-block=\"${clientId}\"] .fsc-slider__frames`);\n                                                    if (framesContainer) {\n                                                        const frameWidth = framesContainer.querySelector('.fsc-frame')?.offsetWidth || 0;\n                                                        const gap = 20;\n                                                        framesContainer.scrollLeft = i * (frameWidth + gap);\n                                                    }\n                                                }}\n                                            >\n                                                {title}\n                                            </button>\n                                        );\n                                    })}\n                                </div>\n                            </div>\n                        )}\n                    </div>\n\n                    <div className=\"fsc-slider__preview-info\">\n                        <p><strong>{__('Configuration:', 'flexible-slider-carousel')}</strong></p>\n                        <ul>\n                            <li>{__('Design:', 'flexible-slider-carousel')} {sliderDesign || 'Default'}</li>\n                            <li>{__('Content:', 'flexible-slider-carousel')} {__('Manual Frames', 'flexible-slider-carousel')}</li>\n                            <li>{__('Animation:', 'flexible-slider-carousel')} {/* transition */}</li>\n                            {autoPlay && <li>{__('Auto Play:', 'flexible-slider-carousel')} {autoPlaySpeed}s</li>}\n                            {(showNavigation || showDots || showTextNavigation) && <li>{__('Navigation:', 'flexible-slider-carousel')} {showNavigation ? __('Arrows', 'flexible-slider-carousel') : ''} {showDots ? __('Dots', 'flexible-slider-carousel') : ''} {showTextNavigation ? __('Text', 'flexible-slider-carousel') : ''}</li>}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\n// Post Query Controls Component\nconst PostQueryControls = ({ attributes, setAttributes, postTypes, taxonomies }) => {\n    const { postQuery } = attributes;\n\n    const updateQuery = (key, value) => {\n        setAttributes({\n            postQuery: {\n                ...postQuery,\n                [key]: value\n            }\n        });\n    };\n\n    return (\n        <div className=\"fsc-post-query-controls\">\n            <SelectControl\n                label={__('Post Type', 'flexible-slider-carousel')}\n                value={postQuery.postType || 'post'}\n                options={postTypes.map(type => ({\n                    label: type.name,\n                    value: type.slug\n                }))}\n                onChange={(value) => updateQuery('postType', value)}\n            />\n\n            <TextControl\n                label={__('Posts Per Page', 'flexible-slider-carousel')}\n                type=\"number\"\n                value={postQuery.postsPerPage || 5}\n                onChange={(value) => updateQuery('postsPerPage', parseInt(value))}\n                min={1}\n                max={20}\n            />\n\n            <SelectControl\n                label={__('Order By', 'flexible-slider-carousel')}\n                value={postQuery.orderBy || 'date'}\n                options={[\n                    { label: __('Date', 'flexible-slider-carousel'), value: 'date' },\n                    { label: __('Title', 'flexible-slider-carousel'), value: 'title' },\n                    { label: __('Menu Order', 'flexible-slider-carousel'), value: 'menu_order' },\n                    { label: __('Random', 'flexible-slider-carousel'), value: 'rand' }\n                ]}\n                onChange={(value) => updateQuery('orderBy', value)}\n            />\n\n            <SelectControl\n                label={__('Order', 'flexible-slider-carousel')}\n                value={postQuery.order || 'DESC'}\n                options={[\n                    { label: __('Descending', 'flexible-slider-carousel'), value: 'DESC' },\n                    { label: __('Ascending', 'flexible-slider-carousel'), value: 'ASC' }\n                ]}\n                onChange={(value) => updateQuery('order', value)}\n            />\n        </div>\n    );\n};\n\n// Responsive Settings Component\nconst ResponsiveSettings = ({ settings, onChange, slidesToShow, slidesToScroll, onSlidesToShowChange, onSlidesToScrollChange, previewBreakpoint, onPreviewBreakpointChange }) => {\n    const [activeTab, setActiveTab] = useState('desktop');\n\n    const updateBreakpoint = (breakpoint, key, value) => {\n        onChange({\n            ...settings,\n            [breakpoint]: {\n                ...settings[breakpoint],\n                [key]: value\n            }\n        });\n    };\n\n    const updateSlidesToShow = (breakpoint, value) => {\n        onSlidesToShowChange({\n            ...slidesToShow,\n            [breakpoint]: value\n        });\n    };\n\n    const updateSlidesToScroll = (breakpoint, value) => {\n        onSlidesToScrollChange({\n            ...slidesToScroll,\n            [breakpoint]: value\n        });\n    };\n\n    const renderBreakpointSettings = (breakpoint) => (\n        <div className=\"fsc-breakpoint-settings\">\n            {breakpoint !== 'phone' && (\n                <RangeControl\n                    label={__('Min Width (px)', 'flexible-slider-carousel')}\n                    value={settings[breakpoint]?.minWidth || 0}\n                    onChange={(value) => updateBreakpoint(breakpoint, 'minWidth', value)}\n                    min={0}\n                    max={2000}\n                    step={10}\n                />\n            )}\n\n            <RangeControl\n                label={__('Inner Padding (px)', 'flexible-slider-carousel')}\n                value={settings[breakpoint]?.innerPadding || 10}\n                onChange={(value) => updateBreakpoint(breakpoint, 'innerPadding', value)}\n                min={0}\n                max={100}\n                step={5}\n                help={__('Padding inside frames (Standard: 10px)', 'flexible-slider-carousel')}\n            />\n\n            <RangeControl\n                label={__('Slides To Show', 'flexible-slider-carousel')}\n                value={slidesToShow[breakpoint] || 1}\n                onChange={(value) => updateSlidesToShow(breakpoint, value)}\n                min={1}\n                max={5}\n                step={1}\n            />\n\n            <RangeControl\n                label={__('Slides To Scroll', 'flexible-slider-carousel')}\n                value={slidesToScroll[breakpoint] || 1}\n                onChange={(value) => updateSlidesToScroll(breakpoint, value)}\n                min={1}\n                max={5}\n                step={1}\n            />\n        </div>\n    );\n\n    return (\n        <div className=\"fsc-responsive-settings\">\n            {/* Tab Navigation */}\n            <div className=\"fsc-responsive-tabs\">\n                {['desktop', 'tablet', 'phone'].map(breakpoint => (\n                    <button\n                        key={breakpoint}\n                        className={`fsc-responsive-tab ${activeTab === breakpoint ? 'fsc-responsive-tab--active' : ''}`}\n                        onClick={() => {\n                            setActiveTab(breakpoint);\n                            onPreviewBreakpointChange(breakpoint);\n                        }}\n                    >\n                        {breakpoint.charAt(0).toUpperCase() + breakpoint.slice(1)}\n                    </button>\n                ))}\n            </div>\n\n            {/* Tab Content */}\n            <div className=\"fsc-responsive-tab-content\">\n                {activeTab === 'desktop' && renderBreakpointSettings('desktop')}\n                {activeTab === 'tablet' && renderBreakpointSettings('tablet')}\n                {activeTab === 'phone' && renderBreakpointSettings('phone')}\n            </div>\n        </div>\n    );\n};\n\n// Export for block.json\nexport const edit = SliderBlock;\nexport const save = () => <InnerBlocks.Content />;\n\n// Block registrieren\nregisterBlockType('flexible-slider-carousel/slider', {\n    edit: SliderBlock,\n    save: () => <InnerBlocks.Content />\n}); "],"names":["module","exports","window","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","ALLOWED_BLOCKS","TEMPLATE","ResponsiveSettings","settings","onChange","slidesToShow","slidesToScroll","onSlidesToShowChange","onSlidesToScrollChange","previewBreakpoint","onPreviewBreakpointChange","activeTab","setActiveTab","useState","updateBreakpoint","breakpoint","value","renderBreakpointSettings","createElement","className","RangeControl","label","__","minWidth","min","max","step","innerPadding","help","updateSlidesToShow","updateSlidesToScroll","map","onClick","charAt","toUpperCase","slice","registerBlockType","edit","SliderBlock","attributes","setAttributes","clientId","sliderDesign","autoPlay","autoPlaySpeed","touchSwipe","showNavigation","showDots","showTextNavigation","textNavigationPosition","responsiveSettings","loading","sliderType","gap","animationDuration","animationTimingFunc","animationType","animationDirection","animationIntensity","focusAt","peek","keyboard","touchRatio","intersectionObserver","align","customCSS","tabFontSize","tabFontWeight","tabTextAlign","tabPadding","tabBorderRadius","tabBorderWidth","tabTextColor","tabTextColorHover","tabTextColorActive","tabBackgroundColor","tabBackgroundColorHover","tabBackgroundColorActive","tabBorderColor","tabBorderColorHover","tabBorderColorActive","tabBoxShadow","tabBoxShadowActive","arrowBackgroundColor","arrowBackgroundColorHover","arrowTextColor","dotBackgroundColor","dotBackgroundColorHover","dotBackgroundColorActive","desktop","tablet","phone","isLoading","setIsLoading","error","setError","activeColorPicker","setActiveColorPicker","setPreviewBreakpoint","blockProps","useBlockProps","style","textAlign","innerBlocksProps","useInnerBlocksProps","allowedBlocks","template","renderAppender","Button","isPrimary","newFrame","wp","blocks","createBlock","data","dispatch","insertBlock","frameCount","useSelect","select","block","getBlock","innerBlocks","length","getCurrentVisibleRange","currentSlidesToShow","startIndex","endIndex","Math","useEffect","console","log","currentBlock","blockElement","document","querySelector","sliderElement","framesContainer","setProperty","prevButton","nextButton","backgroundColor","color","Fragment","BlockControls","AlignmentToolbar","newAlign","InspectorControls","PanelBody","title","initialOpen","SelectControl","options","ToggleControl","checked","marginTop","paddingTop","borderTop","isSecondary","width","fontSize","ColorIndicator","colorValue","Popover","position","onClose","ColorPalette","TextControl","placeholder","Notice","status","isDismissible","Array","from","_","i","frameBlock","frameTitle","content","replace","substring","isInRange","fontWeight","padding","borderRadius","borderWidth","borderStyle","borderColor","boxShadow","frameWidth","offsetWidth","scrollLeft","save","InnerBlocks","Content"],"sourceRoot":""}