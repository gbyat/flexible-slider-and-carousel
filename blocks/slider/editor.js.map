{"version":3,"file":"slider/editor.js","mappings":"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","sources":["webpack://flexible-slider-and-carousel/external window [\"wp\",\"element\"]","webpack://flexible-slider-and-carousel/external window [\"wp\",\"data\"]","webpack://flexible-slider-and-carousel/external window [\"wp\",\"components\"]","webpack://flexible-slider-and-carousel/external window [\"wp\",\"apiFetch\"]","webpack://flexible-slider-and-carousel/external window [\"wp\",\"coreData\"]","webpack://flexible-slider-and-carousel/external window \"React\"","webpack://flexible-slider-and-carousel/external window [\"wp\",\"blockEditor\"]","webpack://flexible-slider-and-carousel/external window [\"wp\",\"i18n\"]","webpack://flexible-slider-and-carousel/external window [\"wp\",\"blocks\"]","webpack://flexible-slider-and-carousel/webpack/bootstrap","webpack://flexible-slider-and-carousel/webpack/runtime/compat get default export","webpack://flexible-slider-and-carousel/webpack/runtime/define property getters","webpack://flexible-slider-and-carousel/webpack/runtime/hasOwnProperty shorthand","webpack://flexible-slider-and-carousel/./src/slider/index.js"],"sourcesContent":["module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"apiFetch\"];","module.exports = window[\"wp\"][\"coreData\"];","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"i18n\"];","module.exports = window[\"wp\"][\"blocks\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","import { registerBlockType } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\nimport {\n    useBlockProps,\n    InnerBlocks,\n    InspectorControls,\n    useInnerBlocksProps,\n    BlockControls,\n    AlignmentToolbar,\n    ColorPalette\n} from '@wordpress/block-editor';\nimport {\n    PanelBody,\n    SelectControl,\n    ToggleControl,\n    RangeControl,\n    TextControl,\n    Button,\n    Notice,\n    Spinner,\n    ColorIndicator,\n    Popover\n} from '@wordpress/components';\nimport { useState, useEffect } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { store as coreDataStore } from '@wordpress/core-data';\nimport apiFetch from '@wordpress/api-fetch';\n\nconst ALLOWED_BLOCKS = ['flexible-slider-carousel/frame'];\nconst TEMPLATE = [\n    ['flexible-slider-carousel/frame', {}]\n];\n\nconst SliderBlock = ({ attributes, setAttributes, clientId }) => {\n    const {\n\n        autoPlay,\n        autoPlaySpeed,\n        touchSwipe,\n        showNavigation,\n        showDots,\n        showTextNavigation,\n        textNavigationPosition,\n        responsiveSettings,\n        slidesToShow,\n        slidesToScroll,\n        loading,\n        // Swiper.js specific attributes\n        sliderType,\n        gap,\n        animationDuration,\n        animationTimingFunc,\n        animationType,\n        animationDirection,\n        animationIntensity,\n        centeredSlides,\n\n        keyboard,\n        touchRatio,\n        intersectionObserver,\n        align,\n        customCSS,\n        // Tab Styling Attributes\n        tabFontSize,\n        tabFontWeight,\n        tabTextAlign,\n        tabPadding,\n        tabBorderRadius,\n        tabBorderWidth,\n        tabTextColor,\n        tabTextColorHover,\n        tabTextColorActive,\n        tabBackgroundColor,\n        tabBackgroundColorHover,\n        tabBackgroundColorActive,\n        tabBorderColor,\n        tabBorderColorHover,\n        tabBorderColorActive,\n        tabBoxShadow,\n        tabBoxShadowActive,\n        // Frame Styling Attributes\n        frameBorderRadius,\n        frameBorderWidth,\n        frameBorderColor,\n        frameBoxShadow,\n        // Navigation Colors\n        arrowBackgroundColor,\n        arrowBackgroundColorHover,\n        arrowTextColor,\n        // Arrow Sizing\n        arrowSize,\n        arrowPadding,\n        arrowBorderRadius,\n        dotBackgroundColor,\n        dotBackgroundColorHover,\n        dotBackgroundColorActive,\n        // Grid Settings\n        gridRows,\n        gridFill\n    } = attributes;\n\n    // Use slidesToShow and slidesToScroll from attributes, with fallbacks\n    const currentSlidesToShow = slidesToShow || { desktop: 1, tablet: 1, phone: 1 };\n    const currentSlidesToScroll = slidesToScroll || { desktop: 1, tablet: 1, phone: 1 };\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n    const [activeColorPicker, setActiveColorPicker] = useState(null);\n    const [previewBreakpoint, setPreviewBreakpoint] = useState('desktop');\n\n    const blockProps = useBlockProps({\n        className: 'fsc-slider',\n        style: {\n            textAlign: align\n        },\n        'data-slides-desktop': slidesToShow?.desktop || 1,\n        'data-slides-tablet': slidesToShow?.tablet || 1,\n        'data-slides-phone': slidesToShow?.phone || 1,\n        'data-slides-scroll-desktop': slidesToScroll?.desktop || 1,\n        'data-slides-scroll-tablet': slidesToScroll?.tablet || 1,\n        'data-slides-scroll-phone': slidesToScroll?.phone || 1,\n        'data-slider-type': sliderType || 'carousel',\n        'data-gap': gap || 10,\n        'data-animation-duration': animationDuration || 800,\n        'data-animation-timing-func': animationTimingFunc || 'cubic-bezier(0.165, 0.840, 0.440, 1.000)',\n        'data-animation-type': animationType || 'slide',\n        'data-animation-direction': animationDirection || 'horizontal',\n        'data-animation-intensity': animationIntensity || 50,\n        // Removed focusAt - using centeredSlides instead\n        'data-centered-slides': centeredSlides !== false ? 'true' : 'false',\n\n        'data-keyboard': keyboard !== false ? 'true' : 'false',\n        'data-touch-ratio': touchRatio || 0.5,\n        // Navigation Colors\n        'data-arrow-background-color': arrowBackgroundColor || '#007cba',\n        'data-arrow-background-color-hover': arrowBackgroundColorHover || '#005a87',\n        'data-arrow-text-color': arrowTextColor || '#ffffff',\n        'data-dot-background-color': dotBackgroundColor || '#dddddd',\n        'data-dot-background-color-hover': dotBackgroundColorHover || '#00a0d2',\n        'data-dot-background-color-active': dotBackgroundColorActive || '#007cba',\n        // Arrow sizing\n        'data-arrow-size': arrowSize !== undefined ? arrowSize : 40,\n        'data-arrow-padding': arrowPadding !== undefined ? arrowPadding : 10,\n        'data-arrow-border-radius': arrowBorderRadius !== undefined ? arrowBorderRadius : 4,\n        // Tab Colors\n        'data-tab-text-color': tabTextColor || '#333333',\n        'data-tab-text-color-hover': tabTextColorHover || '#ffffff',\n        'data-tab-text-color-active': tabTextColorActive || '#ffffff',\n        'data-tab-background-color': tabBackgroundColor || '#f5f5f5',\n        'data-tab-background-color-hover': tabBackgroundColorHover || '#00a0d2',\n        'data-tab-background-color-active': tabBackgroundColorActive || '#007cba',\n        'data-tab-border-color': tabBorderColor || '#dddddd',\n        'data-tab-border-color-hover': tabBorderColorHover || '#00a0d2',\n        'data-tab-border-color-active': tabBorderColorActive || '#007cba',\n        // Frame Styling\n        'data-frame-border-radius': frameBorderRadius !== undefined ? frameBorderRadius : 8,\n        'data-frame-border-width': frameBorderWidth !== undefined ? frameBorderWidth : 0,\n        'data-frame-border-color': frameBorderColor !== undefined ? frameBorderColor : '#dddddd',\n        'data-frame-box-shadow': frameBoxShadow !== undefined ? frameBoxShadow : 'none',\n        // Responsive Settings\n        'data-inner-padding-desktop': responsiveSettings?.desktop?.innerPadding !== undefined ? responsiveSettings.desktop.innerPadding : 10,\n        'data-inner-padding-tablet': responsiveSettings?.tablet?.innerPadding !== undefined ? responsiveSettings.tablet.innerPadding : 10,\n        'data-inner-padding-phone': responsiveSettings?.phone?.innerPadding !== undefined ? responsiveSettings.phone.innerPadding : 10\n    });\n\n    const innerBlocksProps = useInnerBlocksProps(\n        { className: 'fsc-slider__frames' },\n        {\n            allowedBlocks: ALLOWED_BLOCKS,\n            template: TEMPLATE,\n            renderAppender: () => (\n                <div className=\"fsc-slider__add-frame\">\n                    <Button\n                        isPrimary\n                        onClick={() => {\n                            const newFrame = wp.blocks.createBlock('flexible-slider-carousel/frame', {});\n                            wp.data.dispatch('core/block-editor').insertBlock(newFrame, undefined, clientId);\n                        }}\n                    >\n                        {__('Add Frame', 'flexible-slider-and-carousel')}\n                    </Button>\n                </div>\n            )\n        }\n    );\n\n    // Get visible frames for editor preview based on slidesToShow setting\n    const visibleFrames = useSelect(select => {\n        const block = select('core/block-editor').getBlock(clientId);\n        if (!block) return [];\n\n        const frames = block.innerBlocks || [];\n        // Use slidesToShow directly (no division needed)\n        const slidesToShowCount = Math.ceil((slidesToShow?.desktop || 1) * frames.length);\n\n        // Return only the first N frames based on slidesToShow setting\n        return frames.slice(0, slidesToShowCount);\n    }, [clientId, slidesToShow]);\n\n    // Get frame count for validation\n    const frameCount = useSelect(select => {\n        const block = select('core/block-editor').getBlock(clientId);\n        return block ? block.innerBlocks.length : 0;\n    }, [clientId]);\n\n\n\n    // Validate minimum frames\n    useEffect(() => {\n        if (frameCount < 1) {\n            setError(__('Slider must have at least one frame.', 'flexible-slider-and-carousel'));\n        } else {\n            setError('');\n        }\n    }, [frameCount]);\n\n    // Auto-set responsive settings to 1 frame for 3D effects\n    useEffect(() => {\n        console.log('🎯 useEffect triggered with animationType:', animationType);\n        console.log('Current slidesToShow:', slidesToShow);\n        console.log('Current slidesToScroll:', slidesToScroll);\n\n        const is3DEffect = ['flip', 'creative', 'cube', 'fade'].includes(animationType);\n\n        if (is3DEffect) {\n            console.log('🎯 3D effect detected!');\n\n            // Check if current settings are not already 1 frame\n            const currentSlidesToShow = slidesToShow || { desktop: 1, tablet: 1, phone: 1 };\n            const currentSlidesToScroll = slidesToScroll || { desktop: 1, tablet: 1, phone: 1 };\n\n            const needsUpdate = currentSlidesToShow.desktop !== 1 || currentSlidesToShow.tablet !== 1 || currentSlidesToShow.phone !== 1 ||\n                currentSlidesToScroll.desktop !== 1 || currentSlidesToScroll.tablet !== 1 || currentSlidesToScroll.phone !== 1;\n\n            console.log('Needs update?', needsUpdate);\n            console.log('Current slidesToShow:', currentSlidesToShow);\n            console.log('Current slidesToScroll:', currentSlidesToScroll);\n\n            if (needsUpdate) {\n                console.log('🎯 Updating slides to 1 frame...');\n                setAttributes({\n                    slidesToShow: { desktop: 1, tablet: 1, phone: 1 },\n                    slidesToScroll: { desktop: 1, tablet: 1, phone: 1 }\n                });\n                console.log('✅ Update completed');\n            } else {\n                console.log('✅ No update needed - already set to 1 frame');\n            }\n        } else {\n            console.log('🎯 Not a 3D effect, no update needed');\n\n            // Special handling for cards effect - removed minimum frame restriction\n            if (animationType === 'cards') {\n                // Allow any number of frames for cards effect\n                console.log('🎯 Cards effect detected - allowing any frame count');\n            } else {\n                // For other non-3D effects, ensure we have proper default values\n                if (!slidesToShow) {\n                    setAttributes({\n                        slidesToShow: { desktop: 3, tablet: 2, phone: 1 },\n                        slidesToScroll: { desktop: 1, tablet: 1, phone: 1 }\n                    });\n                    console.log('✅ Set default slidesToShow for non-3D effect');\n                }\n            }\n        }\n    }, [animationType, slidesToShow, slidesToScroll, setAttributes]);\n\n    // Simple CSS-based editor preview (no Swiper to avoid conflicts)\n    useEffect(() => {\n        const sliderBlock = document.querySelector(`[data-block=\"${clientId}\"]`);\n        if (!sliderBlock) return;\n\n        // Apply basic styling for editor preview\n        const framesContainer = sliderBlock.querySelector('.fsc-slider__frames-editor');\n        if (framesContainer) {\n            framesContainer.style.display = 'flex';\n            framesContainer.style.gap = `${gap || 10}px`;\n            framesContainer.style.overflow = 'hidden';\n            framesContainer.style.width = '100%';\n        }\n    }, [clientId, gap]);\n\n    // Convert frames to swiper-slides in editor and fix navigation arrows\n    useEffect(() => {\n        const sliderBlock = document.querySelector(`[data-block=\"${clientId}\"]`);\n        if (!sliderBlock) return;\n\n        // Add swiper-slide class to frames\n        const frames = sliderBlock.querySelectorAll('.fsc-frame');\n        frames.forEach(frame => {\n            if (!frame.classList.contains('swiper-slide')) {\n                frame.classList.add('swiper-slide');\n            }\n        });\n\n        // Fix navigation arrows content\n        const prevButton = sliderBlock.querySelector('.swiper-button-prev');\n        const nextButton = sliderBlock.querySelector('.swiper-button-next');\n\n        if (prevButton && !prevButton.textContent) {\n            prevButton.textContent = '‹';\n        }\n        if (nextButton && !nextButton.textContent) {\n            nextButton.textContent = '›';\n        }\n    }, [clientId, frameCount]);\n\n    // Force re-render when tab styling attributes change\n    useEffect(() => {\n        // This will trigger a re-render when tab styling changes\n    }, [tabFontSize, tabFontWeight, tabTextAlign, tabPadding, tabBorderRadius, tabBorderWidth,\n        tabTextColor, tabTextColorHover, tabTextColorActive, tabBackgroundColor, tabBackgroundColorHover, tabBackgroundColorActive,\n        tabBorderColor, tabBorderColorHover, tabBorderColorActive, tabBoxShadow, tabBoxShadowActive]);\n\n    // Update CSS variables in editor when colors change\n    useEffect(() => {\n        console.log('🎨 Color useEffect triggered with:', {\n            arrowBackgroundColor,\n            arrowBackgroundColorHover,\n            arrowTextColor,\n            dotBackgroundColor,\n            dotBackgroundColorHover,\n            dotBackgroundColorActive,\n            tabBackgroundColor,\n            tabBackgroundColorHover,\n            tabBackgroundColorActive,\n            tabTextColor,\n            tabTextColorHover,\n            tabTextColorActive,\n            tabBorderColor,\n            tabBorderColorHover,\n            tabBorderColorActive\n        });\n\n        // Find the current slider block in the editor\n        const currentBlock = wp.data.select('core/block-editor').getBlock(clientId);\n        if (currentBlock) {\n            console.log('🔍 Current block found:', currentBlock);\n\n            // Find the DOM element for this specific block\n            const blockElement = document.querySelector(`[data-block=\"${clientId}\"]`);\n            console.log('🔍 Block element search result:', blockElement);\n\n            if (blockElement) {\n                console.log('🔍 Block element found, using it directly for CSS variables');\n\n                // The block element itself has all the data attributes, so use it directly\n                const sliderElement = blockElement; // Use the block element itself\n                console.log('🎯 Using block element as slider element:', sliderElement);\n\n                // Also find the frames container for additional CSS variable setting\n                const framesContainer = blockElement.querySelector('.fsc-slider__frames');\n\n                // Update arrow colors - set on both slider and frames container\n                if (arrowBackgroundColor) {\n                    sliderElement.style.setProperty('--arrow-background-color', arrowBackgroundColor, 'important');\n                    if (framesContainer) framesContainer.style.setProperty('--arrow-background-color', arrowBackgroundColor, 'important');\n                    console.log('✅ Set --arrow-background-color:', arrowBackgroundColor);\n\n                    // Also set directly on navigation elements\n                    const prevButton = blockElement.querySelector('.swiper-button-prev');\n                    const nextButton = blockElement.querySelector('.swiper-button-next');\n                    if (prevButton) prevButton.style.backgroundColor = arrowBackgroundColor;\n                    if (nextButton) nextButton.style.backgroundColor = arrowBackgroundColor;\n                    console.log('🎯 Set direct background on buttons:', arrowBackgroundColor);\n                }\n                if (arrowBackgroundColorHover) {\n                    sliderElement.style.setProperty('--arrow-background-color-hover', arrowBackgroundColorHover, 'important');\n                    if (framesContainer) framesContainer.style.setProperty('--arrow-background-color-hover', arrowBackgroundColorHover, 'important');\n                    console.log('✅ Set --arrow-background-color-hover:', arrowBackgroundColorHover);\n                }\n                if (arrowTextColor) {\n                    sliderElement.style.setProperty('--arrow-text-color', arrowTextColor, 'important');\n                    if (framesContainer) framesContainer.style.setProperty('--arrow-text-color', arrowTextColor, 'important');\n                    console.log('✅ Set --arrow-text-color:', arrowTextColor);\n\n                    // Also set directly on navigation elements\n                    const prevButton = blockElement.querySelector('.swiper-button-prev');\n                    const nextButton = blockElement.querySelector('.swiper-button-next');\n                    if (prevButton) prevButton.style.color = arrowTextColor;\n                    if (nextButton) nextButton.style.color = arrowTextColor;\n                    console.log('🎯 Set direct color on buttons:', arrowTextColor);\n                }\n\n                // Update dot colors - set on both slider and frames container\n                if (dotBackgroundColor) {\n                    sliderElement.style.setProperty('--dot-background-color', dotBackgroundColor, 'important');\n                    if (framesContainer) framesContainer.style.setProperty('--dot-background-color', dotBackgroundColor, 'important');\n                    console.log('✅ Set --dot-background-color:', dotBackgroundColor);\n                }\n                if (dotBackgroundColorHover) {\n                    sliderElement.style.setProperty('--dot-background-color-hover', dotBackgroundColorHover, 'important');\n                    if (framesContainer) framesContainer.style.setProperty('--dot-background-color-hover', dotBackgroundColorHover, 'important');\n                    console.log('✅ Set --dot-background-color-hover:', dotBackgroundColorHover);\n                }\n                if (dotBackgroundColorActive) {\n                    sliderElement.style.setProperty('--dot-background-color-active', dotBackgroundColorActive, 'important');\n                    if (framesContainer) framesContainer.style.setProperty('--dot-background-color-active', dotBackgroundColorActive, 'important');\n                    console.log('✅ Set --dot-background-color-active:', dotBackgroundColorActive);\n                }\n\n                // Update tab colors\n                if (tabBackgroundColor) {\n                    sliderElement.style.setProperty('--tab-background-color', tabBackgroundColor, 'important');\n                    console.log('✅ Set --tab-background-color:', tabBackgroundColor);\n                }\n                if (tabBackgroundColorHover) {\n                    sliderElement.style.setProperty('--tab-background-color-hover', tabBackgroundColorHover, 'important');\n                    console.log('✅ Set --tab-background-color-hover:', tabBackgroundColorHover);\n                }\n                if (tabBackgroundColorActive) {\n                    sliderElement.style.setProperty('--tab-background-color-active', tabBackgroundColorActive, 'important');\n                    console.log('✅ Set --tab-background-color-active:', tabBackgroundColorActive);\n                }\n                if (tabTextColor) {\n                    sliderElement.style.setProperty('--tab-text-color', tabTextColor, 'important');\n                    console.log('✅ Set --tab-text-color:', tabTextColor);\n                }\n                if (tabTextColorHover) {\n                    sliderElement.style.setProperty('--tab-text-color-hover', tabTextColorHover, 'important');\n                    console.log('✅ Set --tab-text-color-hover:', tabTextColorHover);\n                }\n                if (tabTextColorActive) {\n                    sliderElement.style.setProperty('--tab-text-color-active', tabTextColorActive, 'important');\n                    console.log('✅ Set --tab-text-color-active:', tabTextColorActive);\n                }\n                if (tabBorderColor) {\n                    sliderElement.style.setProperty('--tab-border-color', tabBorderColor, 'important');\n                    console.log('✅ Set --tab-border-color:', tabBorderColor);\n                }\n                if (tabBorderColorHover) {\n                    sliderElement.style.setProperty('--tab-border-color-hover', tabBorderColorHover, 'important');\n                    console.log('✅ Set --tab-border-color-hover:', tabBorderColorHover);\n                }\n                if (tabBorderColorActive) {\n                    sliderElement.style.setProperty('--tab-border-color-active', tabBorderColorActive, 'important');\n                    console.log('✅ Set --tab-border-color-active:', tabBorderColorActive);\n                }\n            } else {\n                console.log('❌ Block element not found for clientId:', clientId);\n            }\n        } else {\n            console.log('❌ Current block not found');\n        }\n    }, [\n        arrowBackgroundColor, arrowBackgroundColorHover, arrowTextColor,\n        dotBackgroundColor, dotBackgroundColorHover, dotBackgroundColorActive,\n        tabBackgroundColor, tabBackgroundColorHover, tabBackgroundColorActive,\n        tabTextColor, tabTextColorHover, tabTextColorActive, tabBorderColor, tabBorderColorHover, tabBorderColorActive\n    ]);\n\n    return (\n        <>\n            <BlockControls>\n                <AlignmentToolbar\n                    value={align}\n                    onChange={(newAlign) => setAttributes({ align: newAlign })}\n                />\n            </BlockControls>\n\n            <InspectorControls>\n                <PanelBody title={__('Slider Settings', 'flexible-slider-and-carousel')} initialOpen={true}>\n                    <div className=\"fsc-slider__info\">\n                        <p>{__('Add frames manually using the + button below to create your slider content.', 'flexible-slider-and-carousel')}</p>\n                    </div>\n\n                    <h4>{__('Frame Styling', 'flexible-slider-and-carousel')}</h4>\n                    <RangeControl\n                        label={__('Gap Between Frames (px)', 'flexible-slider-and-carousel')}\n                        value={gap !== undefined ? gap : 10}\n                        onChange={(value) => setAttributes({ gap: value })}\n                        min={0}\n                        max={50}\n                        step={1}\n                        help={__('Space between individual frames (Standard: 10px)', 'flexible-slider-and-carousel')}\n                    />\n                    <RangeControl\n                        label={__('Border Radius (px)', 'flexible-slider-and-carousel')}\n                        value={frameBorderRadius !== undefined ? frameBorderRadius : 8}\n                        onChange={(value) => setAttributes({ frameBorderRadius: value })}\n                        min={0}\n                        max={50}\n                        step={1}\n                        help={__('Rounded corners for frames (Standard: 8px)', 'flexible-slider-and-carousel')}\n                    />\n\n                    <RangeControl\n                        label={__('Border Width (px)', 'flexible-slider-and-carousel')}\n                        value={frameBorderWidth !== undefined ? frameBorderWidth : 0}\n                        onChange={(value) => setAttributes({ frameBorderWidth: value })}\n                        min={0}\n                        max={10}\n                        step={1}\n                        help={__('Frame border thickness (Standard: 0px)', 'flexible-slider-and-carousel')}\n                    />\n\n                    <div className=\"fsc-color-control\">\n                        <label className=\"components-base-control__label\">{__('Border Color', 'flexible-slider-and-carousel')}</label>\n                        <div className=\"fsc-color-indicator-wrapper\">\n                            <ColorIndicator\n                                colorValue={frameBorderColor}\n                                onClick={() => setActiveColorPicker('frameBorderColor')}\n                            />\n                            <Button\n                                className=\"fsc-color-button\"\n                                onClick={() => setAttributes({ frameBorderColor: undefined })}\n                            >\n                                {__('Clear', 'flexible-slider-and-carousel')}\n                            </Button>\n                        </div>\n                        {activeColorPicker === 'frameBorderColor' && (\n                            <Popover\n                                position=\"bottom center\"\n                                onClose={() => setActiveColorPicker(null)}\n                            >\n                                <ColorPalette\n                                    value={frameBorderColor}\n                                    onChange={(color) => {\n                                        setAttributes({ frameBorderColor: color });\n                                        setActiveColorPicker(null);\n                                    }}\n                                />\n                            </Popover>\n                        )}\n                    </div>\n\n                    <TextControl\n                        label={__('Box Shadow', 'flexible-slider-and-carousel')}\n                        value={frameBoxShadow || 'none'}\n                        onChange={(value) => setAttributes({ frameBoxShadow: value })}\n                        help={__('CSS box-shadow value (e.g., \"0 2px 8px rgba(0,0,0,0.1)\" or \"none\")', 'flexible-slider-and-carousel')}\n                        placeholder=\"none\"\n                    />\n\n\n                </PanelBody>\n\n                <PanelBody title={__('Animation & Behavior', 'flexible-slider-and-carousel')} initialOpen={false}>\n                    <SelectControl\n                        label={__('Slider Type', 'flexible-slider-and-carousel')}\n                        value={sliderType || 'carousel'}\n                        options={[\n                            { label: __('Carousel (Endless Loop)', 'flexible-slider-and-carousel'), value: 'carousel' },\n                            { label: __('Slider (Finite)', 'flexible-slider-and-carousel'), value: 'slider' }\n                        ]}\n                        onChange={(value) => setAttributes({ sliderType: value })}\n                        help={__('Carousel loops endlessly, Slider stops at boundaries (Standard: Carousel)', 'flexible-slider-and-carousel')}\n                    />\n\n                    <SelectControl\n                        label={__('Animation Type', 'flexible-slider-and-carousel')}\n                        value={animationType || 'slide'}\n                        options={[\n                            { label: __('Slide (Standard)', 'flexible-slider-and-carousel'), value: 'slide' },\n                            { label: __('Fade', 'flexible-slider-and-carousel'), value: 'fade' },\n                            { label: __('Flip (1 Frame)', 'flexible-slider-and-carousel'), value: 'flip' },\n                            { label: __('Coverflow', 'flexible-slider-and-carousel'), value: 'coverflow' },\n                            { label: __('Creative (1 Frame)', 'flexible-slider-and-carousel'), value: 'creative' },\n                            { label: __('Cube (1 Frame)', 'flexible-slider-and-carousel'), value: 'cube' },\n                            { label: __('Cards', 'flexible-slider-and-carousel'), value: 'cards' }\n                        ]}\n                        onChange={(value) => setAttributes({ animationType: value })}\n                        help={__('Type of slide animation (default: Slide)', 'flexible-slider-and-carousel')}\n                    />\n\n\n\n                    {/* Animation Direction - only for slide effect */}\n                    {animationType === 'slide' && (\n                        <SelectControl\n                            label={__('Animation Direction', 'flexible-slider-and-carousel')}\n                            value={animationDirection || 'horizontal'}\n                            options={[\n                                { label: __('Horizontal (Default)', 'flexible-slider-and-carousel'), value: 'horizontal' },\n                                { label: __('Vertical', 'flexible-slider-and-carousel'), value: 'vertical' }\n                            ]}\n                            onChange={(value) => setAttributes({ animationDirection: value })}\n                            help={__('Direction of slide movement (default: horizontal)', 'flexible-slider-and-carousel')}\n                        />\n                    )}\n\n\n\n                    {animationType === 'slide' && (\n                        <>\n                            <RangeControl\n                                label=\"Grid Rows\"\n                                value={gridRows}\n                                onChange={(value) => setAttributes({ gridRows: value })}\n                                min={1}\n                                max={4}\n                                step={1}\n                            />\n                            {gridRows > 1 && (\n                                <SelectControl\n                                    label=\"Grid Fill\"\n                                    value={gridFill}\n                                    options={[\n                                        { label: 'Column', value: 'column' },\n                                        { label: 'Row', value: 'row' }\n                                    ]}\n                                    onChange={(value) => setAttributes({ gridFill: value })}\n                                />\n                            )}\n                        </>\n                    )}\n\n\n                    <SelectControl\n                        label={__('Animation Timing Function', 'flexible-slider-and-carousel')}\n                        value={animationTimingFunc || 'cubic-bezier(0.165, 0.840, 0.440, 1.000)'}\n                        options={[\n                            { label: __('Default (Smooth)', 'flexible-slider-and-carousel'), value: 'cubic-bezier(0.165, 0.840, 0.440, 1.000)' },\n                            { label: __('Linear', 'flexible-slider-and-carousel'), value: 'linear' },\n                            { label: __('Ease', 'flexible-slider-and-carousel'), value: 'ease' },\n                            { label: __('Ease-in', 'flexible-slider-and-carousel'), value: 'ease-in' },\n                            { label: __('Ease-out', 'flexible-slider-and-carousel'), value: 'ease-out' },\n                            { label: __('Ease-in-out', 'flexible-slider-and-carousel'), value: 'ease-in-out' }\n                        ]}\n                        onChange={(value) => setAttributes({ animationTimingFunc: value })}\n                        help={__('Default: Default (Smooth)', 'flexible-slider-and-carousel')}\n                    />\n\n                    <RangeControl\n                        label={__('Animation Duration (ms)', 'flexible-slider-and-carousel')}\n                        value={animationDuration || 400}\n                        onChange={(value) => setAttributes({ animationDuration: value })}\n                        min={100}\n                        max={2000}\n                        step={50}\n                        help={__('Default: 400ms', 'flexible-slider-and-carousel')}\n                    />\n\n\n                    {/* Focus Position removed - using Centered Slides instead */}\n\n                    <ToggleControl\n                        label={__('Centered Slides', 'flexible-slider-and-carousel')}\n                        checked={centeredSlides !== false}\n                        onChange={(value) => setAttributes({ centeredSlides: value })}\n                        help={__('Center the active slide (works great with 1.5+ frames)', 'flexible-slider-and-carousel')}\n                    />\n\n                    <ToggleControl\n                        label={__('Auto Play', 'flexible-slider-and-carousel')}\n                        checked={autoPlay}\n                        onChange={(value) => setAttributes({ autoPlay: value })}\n                    />\n\n                    {autoPlay && (\n                        <RangeControl\n                            label={__('Auto Play Speed (seconds)', 'flexible-slider-and-carousel')}\n                            value={autoPlaySpeed}\n                            onChange={(value) => setAttributes({ autoPlaySpeed: value })}\n                            min={1}\n                            max={10}\n                            step={0.5}\n                        />\n                    )}\n\n                    <ToggleControl\n                        label={__('Keyboard Navigation', 'flexible-slider-and-carousel')}\n                        checked={keyboard !== false}\n                        onChange={(value) => setAttributes({ keyboard: value })}\n                        help={__('Use arrow keys to navigate (Default: Enabled)', 'flexible-slider-and-carousel')}\n                    />\n\n                    <ToggleControl\n                        label={__('Touch/Swipe Support', 'flexible-slider-and-carousel')}\n                        checked={touchSwipe}\n                        onChange={(value) => setAttributes({ touchSwipe: value })}\n                    />\n\n                    <RangeControl\n                        label={__('Touch/Swipe Sensitivity', 'flexible-slider-and-carousel')}\n                        value={touchRatio || 0.5}\n                        onChange={(value) => setAttributes({ touchRatio: value })}\n                        min={0.1}\n                        max={2.0}\n                        step={0.1}\n                        help={__('Higher values = more sensitive touch/swipe (Standard: 0.5)', 'flexible-slider-and-carousel')}\n                    />\n\n\n                    <div style={{ marginTop: '20px', paddingTop: '20px', borderTop: '1px solid #ddd' }}>\n                        <Button\n                            isSecondary\n                            onClick={() => {\n                                setAttributes({\n                                    // Swiper.js settings\n                                    sliderType: 'carousel',\n                                    gap: 15,\n                                    animationDuration: 800,\n                                    animationTimingFunc: 'cubic-bezier(0.165, 0.840, 0.440, 1.000)',\n                                    animationType: 'slide',\n                                    animationDirection: 'horizontal',\n                                    animationIntensity: 50,\n                                    centeredSlides: true,\n                                    keyboard: true,\n                                    touchRatio: 0.5\n                                });\n                            }}\n                            style={{ width: '100%' }}\n                        >\n                            {__('Reset to default values', 'flexible-slider-and-carousel')}\n                        </Button>\n                        <p style={{ fontSize: '12px', color: '#666', marginTop: '8px', textAlign: 'center' }}>\n                            {__('Resets all Swiper.js options to default values.', 'flexible-slider-and-carousel')}\n                        </p>\n                    </div>\n                </PanelBody>\n\n                <PanelBody title={__('Navigation', 'flexible-slider-and-carousel')} initialOpen={false}>\n                    <ToggleControl\n                        label={__('Navigation Arrows', 'flexible-slider-and-carousel')}\n                        checked={showNavigation}\n                        onChange={(value) => setAttributes({ showNavigation: value })}\n                    />\n\n                    <ToggleControl\n                        label={__('Navigation Dots', 'flexible-slider-and-carousel')}\n                        checked={showDots}\n                        onChange={(value) => setAttributes({ showDots: value })}\n                    />\n\n                    <ToggleControl\n                        label={__('Text Navigation', 'flexible-slider-and-carousel')}\n                        checked={showTextNavigation}\n                        onChange={(value) => setAttributes({ showTextNavigation: value })}\n                        help={__('Show frame titles as navigation tabs', 'flexible-slider-and-carousel')}\n                    />\n\n                    {showTextNavigation && (\n                        <SelectControl\n                            label={__('Text Navigation Position', 'flexible-slider-and-carousel')}\n                            value={textNavigationPosition}\n                            options={[\n                                { label: __('Above Slider', 'flexible-slider-and-carousel'), value: 'above' },\n                                { label: __('Below Slider', 'flexible-slider-and-carousel'), value: 'below' }\n                            ]}\n                            onChange={(value) => setAttributes({ textNavigationPosition: value })}\n                        />\n                    )}\n\n                    {showTextNavigation && (\n                        <>\n                            <PanelBody title={__('Tab Typography', 'flexible-slider-and-carousel')} initialOpen={false}>\n                                <SelectControl\n                                    label={__('Text Align', 'flexible-slider-and-carousel')}\n                                    value={tabTextAlign}\n                                    options={[\n                                        { label: __('Left', 'flexible-slider-and-carousel'), value: 'left' },\n                                        { label: __('Center', 'flexible-slider-and-carousel'), value: 'center' },\n                                        { label: __('Right', 'flexible-slider-and-carousel'), value: 'right' }\n                                    ]}\n                                    onChange={(value) => setAttributes({ tabTextAlign: value })}\n                                />\n\n                                <RangeControl\n                                    label={__('Font Size (px)', 'flexible-slider-and-carousel')}\n                                    value={tabFontSize}\n                                    onChange={(value) => setAttributes({ tabFontSize: value })}\n                                    min={12}\n                                    max={48}\n                                    step={1}\n                                />\n\n                                <SelectControl\n                                    label={__('Font Weight', 'flexible-slider-and-carousel')}\n                                    value={tabFontWeight}\n                                    options={[\n                                        { label: __('Normal', 'flexible-slider-and-carousel'), value: 'normal' },\n                                        { label: __('Bold', 'flexible-slider-and-carousel'), value: 'bold' },\n                                        { label: __('Light', 'flexible-slider-and-carousel'), value: '300' },\n                                        { label: __('Medium', 'flexible-slider-and-carousel'), value: '500' },\n                                        { label: __('Semi Bold', 'flexible-slider-and-carousel'), value: '600' }\n                                    ]}\n                                    onChange={(value) => setAttributes({ tabFontWeight: value })}\n                                />\n                            </PanelBody>\n\n                            <PanelBody title={__('Tab Colors - Normal State', 'flexible-slider-and-carousel')} initialOpen={false}>\n                                <div className=\"fsc-color-control\">\n                                    <label className=\"components-base-control__label\">{__('Text Color', 'flexible-slider-and-carousel')}</label>\n                                    <div className=\"fsc-color-indicator-wrapper\">\n                                        <ColorIndicator\n                                            colorValue={tabTextColor}\n                                            onClick={() => setActiveColorPicker('tabTextColor')}\n                                        />\n                                        <Button\n                                            className=\"fsc-color-button\"\n                                            onClick={() => setAttributes({ tabTextColor: undefined })}\n                                        >\n                                            {__('Clear', 'flexible-slider-and-carousel')}\n                                        </Button>\n                                    </div>\n                                    {activeColorPicker === 'tabTextColor' && (\n                                        <Popover\n                                            position=\"bottom center\"\n                                            onClose={() => setActiveColorPicker(null)}\n                                        >\n                                            <ColorPalette\n                                                value={tabTextColor}\n                                                onChange={(color) => {\n                                                    setAttributes({ tabTextColor: color });\n                                                    setActiveColorPicker(null);\n                                                }}\n                                            />\n                                        </Popover>\n                                    )}\n                                </div>\n\n                                <div className=\"fsc-color-control\">\n                                    <label className=\"components-base-control__label\">{__('Background Color', 'flexible-slider-and-carousel')}</label>\n                                    <div className=\"fsc-color-indicator-wrapper\">\n                                        <ColorIndicator\n                                            colorValue={tabBackgroundColor}\n                                            onClick={() => setActiveColorPicker('tabBackgroundColor')}\n                                        />\n                                        <Button\n                                            className=\"fsc-color-button\"\n                                            onClick={() => setAttributes({ tabBackgroundColor: undefined })}\n                                        >\n                                            {__('Clear', 'flexible-slider-and-carousel')}\n                                        </Button>\n                                    </div>\n                                    {activeColorPicker === 'tabBackgroundColor' && (\n                                        <Popover\n                                            position=\"bottom center\"\n                                            onClose={() => setActiveColorPicker(null)}\n                                        >\n                                            <ColorPalette\n                                                value={tabBackgroundColor}\n                                                onChange={(color) => {\n                                                    setAttributes({ tabBackgroundColor: color });\n                                                    setActiveColorPicker(null);\n                                                }}\n                                            />\n                                        </Popover>\n                                    )}\n                                </div>\n\n                                <div className=\"fsc-color-control\">\n                                    <label className=\"components-base-control__label\">{__('Border Color', 'flexible-slider-and-carousel')}</label>\n                                    <div className=\"fsc-color-indicator-wrapper\">\n                                        <ColorIndicator\n                                            colorValue={tabBorderColor}\n                                            onClick={() => setActiveColorPicker('tabBorderColor')}\n                                        />\n                                        <Button\n                                            className=\"fsc-color-button\"\n                                            onClick={() => setAttributes({ tabBorderColor: undefined })}\n                                        >\n                                            {__('Clear', 'flexible-slider-and-carousel')}\n                                        </Button>\n                                    </div>\n                                    {activeColorPicker === 'tabBorderColor' && (\n                                        <Popover\n                                            position=\"bottom center\"\n                                            onClose={() => setActiveColorPicker(null)}\n                                        >\n                                            <ColorPalette\n                                                value={tabBorderColor}\n                                                onChange={(color) => {\n                                                    setAttributes({ tabBorderColor: color });\n                                                    setActiveColorPicker(null);\n                                                }}\n                                            />\n                                        </Popover>\n                                    )}\n                                </div>\n                            </PanelBody>\n\n                            <PanelBody title={__('Tab Colors - Active State', 'flexible-slider-and-carousel')} initialOpen={false}>\n                                <div className=\"fsc-color-control\">\n                                    <label className=\"components-base-control__label\">{__('Text Color (Active)', 'flexible-slider-and-carousel')}</label>\n                                    <div className=\"fsc-color-indicator-wrapper\">\n                                        <ColorIndicator\n                                            colorValue={tabTextColorActive}\n                                            onClick={() => setActiveColorPicker('tabTextColorActive')}\n                                        />\n                                        <Button\n                                            className=\"fsc-color-button\"\n                                            onClick={() => setAttributes({ tabTextColorActive: undefined })}\n                                        >\n                                            {__('Clear', 'flexible-slider-and-carousel')}\n                                        </Button>\n                                    </div>\n                                    {activeColorPicker === 'tabTextColorActive' && (\n                                        <Popover\n                                            position=\"bottom center\"\n                                            onClose={() => setActiveColorPicker(null)}\n                                        >\n                                            <ColorPalette\n                                                value={tabTextColorActive}\n                                                onChange={(color) => {\n                                                    setAttributes({ tabTextColorActive: color });\n                                                    setActiveColorPicker(null);\n                                                }}\n                                            />\n                                        </Popover>\n                                    )}\n                                </div>\n\n                                <div className=\"fsc-color-control\">\n                                    <label className=\"components-base-control__label\">{__('Background Color (Active)', 'flexible-slider-and-carousel')}</label>\n                                    <div className=\"fsc-color-indicator-wrapper\">\n                                        <ColorIndicator\n                                            colorValue={tabBackgroundColorActive}\n                                            onClick={() => setActiveColorPicker('tabBackgroundColorActive')}\n                                        />\n                                        <Button\n                                            className=\"fsc-color-button\"\n                                            onClick={() => setAttributes({ tabBackgroundColorActive: undefined })}\n                                        >\n                                            {__('Clear', 'flexible-slider-and-carousel')}\n                                        </Button>\n                                    </div>\n                                    {activeColorPicker === 'tabBackgroundColorActive' && (\n                                        <Popover\n                                            position=\"bottom center\"\n                                            onClose={() => setActiveColorPicker(null)}\n                                        >\n                                            <ColorPalette\n                                                value={tabBackgroundColorActive}\n                                                onChange={(color) => {\n                                                    setAttributes({ tabBackgroundColorActive: color });\n                                                    setActiveColorPicker(null);\n                                                }}\n                                            />\n                                        </Popover>\n                                    )}\n                                </div>\n\n                                <div className=\"fsc-color-control\">\n                                    <label className=\"components-base-control__label\">{__('Border Color (Active)', 'flexible-slider-and-carousel')}</label>\n                                    <div className=\"fsc-color-indicator-wrapper\">\n                                        <ColorIndicator\n                                            colorValue={tabBorderColorActive}\n                                            onClick={() => setActiveColorPicker('tabBorderColorActive')}\n                                        />\n                                        <Button\n                                            className=\"fsc-color-button\"\n                                            onClick={() => setAttributes({ tabBorderColorActive: undefined })}\n                                        >\n                                            {__('Clear', 'flexible-slider-and-carousel')}\n                                        </Button>\n                                    </div>\n                                    {activeColorPicker === 'tabBorderColorActive' && (\n                                        <Popover\n                                            position=\"bottom center\"\n                                            onClose={() => setActiveColorPicker(null)}\n                                        >\n                                            <ColorPalette\n                                                value={tabBorderColorActive}\n                                                onChange={(color) => {\n                                                    setAttributes({ tabBorderColorActive: color });\n                                                    setActiveColorPicker(null);\n                                                }}\n                                            />\n                                        </Popover>\n                                    )}\n                                </div>\n                            </PanelBody>\n\n                            <PanelBody title={__('Tab Layout & Effects', 'flexible-slider-and-carousel')} initialOpen={false}>\n                                <RangeControl\n                                    label={__('Padding (px)', 'flexible-slider-and-carousel')}\n                                    value={tabPadding}\n                                    onChange={(value) => setAttributes({ tabPadding: value })}\n                                    min={0}\n                                    max={40}\n                                    step={1}\n                                />\n\n                                <RangeControl\n                                    label={__('Border Radius (px)', 'flexible-slider-and-carousel')}\n                                    value={tabBorderRadius}\n                                    onChange={(value) => setAttributes({ tabBorderRadius: value })}\n                                    min={0}\n                                    max={20}\n                                    step={1}\n                                />\n\n                                <RangeControl\n                                    label={__('Border Width (px)', 'flexible-slider-and-carousel')}\n                                    value={tabBorderWidth}\n                                    onChange={(value) => setAttributes({ tabBorderWidth: value })}\n                                    min={0}\n                                    max={10}\n                                    step={1}\n                                />\n\n                                <TextControl\n                                    label={__('Box Shadow', 'flexible-slider-and-carousel')}\n                                    value={tabBoxShadow}\n                                    onChange={(value) => setAttributes({ tabBoxShadow: value })}\n                                    placeholder=\"0 2px 4px rgba(0,0,0,0.1)\"\n                                    help={__('CSS box-shadow value (e.g., 0 2px 4px rgba(0,0,0,0.1))', 'flexible-slider-and-carousel')}\n                                />\n\n                                <TextControl\n                                    label={__('Box Shadow (Active)', 'flexible-slider-and-carousel')}\n                                    value={tabBoxShadowActive}\n                                    onChange={(value) => setAttributes({ tabBoxShadowActive: value })}\n                                    placeholder=\"0 4px 8px rgba(0,0,0,0.2)\"\n                                    help={__('CSS box-shadow value for active state', 'flexible-slider-and-carousel')}\n                                />\n                            </PanelBody>\n                        </>\n                    )}\n\n                    <PanelBody title={__('Navigation Colors', 'flexible-slider-and-carousel')} initialOpen={false}>\n                        <h4>{__('Arrow Colors', 'flexible-slider-and-carousel')}</h4>\n\n                        <div className=\"fsc-color-control\">\n                            <label className=\"components-base-control__label\">{__('Background Color', 'flexible-slider-and-carousel')}</label>\n                            <div className=\"fsc-color-indicator-wrapper\">\n                                <ColorIndicator\n                                    colorValue={arrowBackgroundColor}\n                                    onClick={() => setActiveColorPicker('arrowBackgroundColor')}\n                                />\n                                <Button\n                                    className=\"fsc-color-button\"\n                                    onClick={() => setAttributes({ arrowBackgroundColor: undefined })}\n                                >\n                                    {__('Clear', 'flexible-slider-and-carousel')}\n                                </Button>\n                            </div>\n                            {activeColorPicker === 'arrowBackgroundColor' && (\n                                <Popover\n                                    position=\"bottom center\"\n                                    onClose={() => setActiveColorPicker(null)}\n                                >\n                                    <ColorPalette\n                                        value={arrowBackgroundColor}\n                                        onChange={(color) => {\n                                            setAttributes({ arrowBackgroundColor: color });\n                                            setActiveColorPicker(null);\n                                        }}\n                                    />\n                                </Popover>\n                            )}\n                        </div>\n\n                        <div className=\"fsc-color-control\">\n                            <label className=\"components-base-control__label\">{__('Background Color (Hover)', 'flexible-slider-and-carousel')}</label>\n                            <div className=\"fsc-color-indicator-wrapper\">\n                                <ColorIndicator\n                                    colorValue={arrowBackgroundColorHover}\n                                    onClick={() => setActiveColorPicker('arrowBackgroundColorHover')}\n                                />\n                                <Button\n                                    className=\"fsc-color-button\"\n                                    onClick={() => setAttributes({ arrowBackgroundColorHover: undefined })}\n                                >\n                                    {__('Clear', 'flexible-slider-and-carousel')}\n                                </Button>\n                            </div>\n                            {activeColorPicker === 'arrowBackgroundColorHover' && (\n                                <Popover\n                                    position=\"bottom center\"\n                                    onClose={() => setActiveColorPicker(null)}\n                                >\n                                    <ColorPalette\n                                        value={arrowBackgroundColorHover}\n                                        onChange={(color) => {\n                                            setAttributes({ arrowBackgroundColorHover: color });\n                                            setActiveColorPicker(null);\n                                        }}\n                                    />\n                                </Popover>\n                            )}\n                        </div>\n\n                        <div className=\"fsc-color-control\">\n                            <label className=\"components-base-control__label\">{__('Arrow Color', 'flexible-slider-and-carousel')}</label>\n                            <div className=\"fsc-color-indicator-wrapper\">\n                                <ColorIndicator\n                                    colorValue={arrowTextColor}\n                                    onClick={() => setActiveColorPicker('arrowTextColor')}\n                                />\n                                <Button\n                                    className=\"fsc-color-button\"\n                                    onClick={() => setAttributes({ arrowTextColor: undefined })}\n                                >\n                                    {__('Clear', 'flexible-slider-and-carousel')}\n                                </Button>\n                            </div>\n                            {activeColorPicker === 'arrowTextColor' && (\n                                <Popover\n                                    position=\"bottom center\"\n                                    onClose={() => setActiveColorPicker(null)}\n                                >\n                                    <ColorPalette\n                                        value={arrowTextColor}\n                                        onChange={(color) => {\n                                            setAttributes({ arrowTextColor: color });\n                                            setActiveColorPicker(null);\n                                        }}\n                                    />\n                                </Popover>\n                            )}\n                        </div>\n\n                        <h4 style={{ marginTop: '16px' }}>{__('Arrow Styling', 'flexible-slider-and-carousel')}</h4>\n                        <RangeControl\n                            label={__('Arrow Size (px)', 'flexible-slider-and-carousel')}\n                            value={arrowSize !== undefined ? arrowSize : 40}\n                            onChange={(value) => setAttributes({ arrowSize: value })}\n                            min={20}\n                            max={96}\n                            step={1}\n                        />\n                        <RangeControl\n                            label={__('Arrow Padding (px)', 'flexible-slider-and-carousel')}\n                            value={arrowPadding !== undefined ? arrowPadding : 10}\n                            onChange={(value) => setAttributes({ arrowPadding: value })}\n                            min={0}\n                            max={24}\n                            step={1}\n                        />\n                        <RangeControl\n                            label={__('Arrow Border Radius (px)', 'flexible-slider-and-carousel')}\n                            value={arrowBorderRadius !== undefined ? arrowBorderRadius : 4}\n                            onChange={(value) => setAttributes({ arrowBorderRadius: value })}\n                            min={0}\n                            max={24}\n                            step={1}\n                        />\n\n                        <h4>{__('Dot Colors', 'flexible-slider-and-carousel')}</h4>\n\n                        <div className=\"fsc-color-control\">\n                            <label className=\"components-base-control__label\">{__('Background Color (Normal)', 'flexible-slider-and-carousel')}</label>\n                            <div className=\"fsc-color-indicator-wrapper\">\n                                <ColorIndicator\n                                    colorValue={dotBackgroundColor}\n                                    onClick={() => setActiveColorPicker('dotBackgroundColor')}\n                                />\n                                <Button\n                                    className=\"fsc-color-button\"\n                                    onClick={() => setAttributes({ dotBackgroundColor: undefined })}\n                                >\n                                    {__('Clear', 'flexible-slider-and-carousel')}\n                                </Button>\n                            </div>\n                            {activeColorPicker === 'dotBackgroundColor' && (\n                                <Popover\n                                    position=\"bottom center\"\n                                    onClose={() => setActiveColorPicker(null)}\n                                >\n                                    <ColorPalette\n                                        value={dotBackgroundColor}\n                                        onChange={(color) => {\n                                            setAttributes({ dotBackgroundColor: color });\n                                            setActiveColorPicker(null);\n                                        }}\n                                    />\n                                </Popover>\n                            )}\n                        </div>\n\n                        <div className=\"fsc-color-control\">\n                            <label className=\"components-base-control__label\">{__('Background Color (Hover)', 'flexible-slider-and-carousel')}</label>\n                            <div className=\"fsc-color-indicator-wrapper\">\n                                <ColorIndicator\n                                    colorValue={dotBackgroundColorHover}\n                                    onClick={() => setActiveColorPicker('dotBackgroundColorHover')}\n                                />\n                                <Button\n                                    className=\"fsc-color-button\"\n                                    onClick={() => setAttributes({ dotBackgroundColorHover: undefined })}\n                                >\n                                    {__('Clear', 'flexible-slider-and-carousel')}\n                                </Button>\n                            </div>\n                            {activeColorPicker === 'dotBackgroundColorHover' && (\n                                <Popover\n                                    position=\"bottom center\"\n                                    onClose={() => setActiveColorPicker(null)}\n                                >\n                                    <ColorPalette\n                                        value={dotBackgroundColorHover}\n                                        onChange={(color) => {\n                                            setAttributes({ dotBackgroundColorHover: color });\n                                            setActiveColorPicker(null);\n                                        }}\n                                    />\n                                </Popover>\n                            )}\n                        </div>\n\n                        <div className=\"fsc-color-control\">\n                            <label className=\"components-base-control__label\">{__('Background Color (Active)', 'flexible-slider-and-carousel')}</label>\n                            <div className=\"fsc-color-indicator-wrapper\">\n                                <ColorIndicator\n                                    colorValue={dotBackgroundColorActive}\n                                    onClick={() => setActiveColorPicker('dotBackgroundColorActive')}\n                                />\n                                <Button\n                                    className=\"fsc-color-button\"\n                                    onClick={() => setAttributes({ dotBackgroundColorActive: undefined })}\n                                >\n                                    {__('Clear', 'flexible-slider-and-carousel')}\n                                </Button>\n                            </div>\n                            {activeColorPicker === 'dotBackgroundColorActive' && (\n                                <Popover\n                                    position=\"bottom center\"\n                                    onClose={() => setActiveColorPicker(null)}\n                                >\n                                    <ColorPalette\n                                        value={dotBackgroundColorActive}\n                                        onChange={(color) => {\n                                            setAttributes({ dotBackgroundColorActive: color });\n                                            setActiveColorPicker(null);\n                                        }}\n                                    />\n                                </Popover>\n                            )}\n                        </div>\n\n\n                    </PanelBody>\n\n                </PanelBody>\n\n                <PanelBody title={__('Performance & SEO', 'flexible-slider-and-carousel')} initialOpen={false}>\n                    <ToggleControl\n                        label={__('Lazy Loading', 'flexible-slider-and-carousel')}\n                        checked={loading}\n                        onChange={(value) => setAttributes({ loading: value })}\n                    />\n\n                    <ToggleControl\n                        label={__('Intersection Observer', 'flexible-slider-and-carousel')}\n                        checked={intersectionObserver}\n                        onChange={(value) => setAttributes({ intersectionObserver: value })}\n                        help={__('Only load slider when it comes into view', 'flexible-slider-and-carousel')}\n                    />\n                </PanelBody>\n\n                <PanelBody title={__('Responsive Settings', 'flexible-slider-and-carousel')} initialOpen={false}>\n                    <ResponsiveSettings\n                        settings={responsiveSettings}\n                        slidesToShow={attributes.slidesToShow}\n                        slidesToScroll={attributes.slidesToScroll}\n                        onChange={(settings) => setAttributes({ responsiveSettings: settings })}\n                        onSlidesToShowChange={(slidesToShow) => setAttributes({ slidesToShow })}\n                        onSlidesToScrollChange={(slidesToScroll) => setAttributes({ slidesToScroll })}\n                        previewBreakpoint={previewBreakpoint}\n                        onPreviewBreakpointChange={setPreviewBreakpoint}\n                        is3DEffect={['flip', 'creative', 'cube'].includes(animationType)}\n                    />\n                </PanelBody>\n\n\n            </InspectorControls>\n\n            <div {...blockProps}>\n                {error && (\n                    <Notice status=\"error\" isDismissible={false}>\n                        {error}\n                    </Notice>\n                )}\n\n                {/* Text Navigation Above Slider */}\n                {showTextNavigation && textNavigationPosition === 'above' && (\n                    <div className=\"fsc-slider__text-nav-editor fsc-slider__text-nav-editor--above\">\n                        <div className=\"fsc-slider__frame-titles-editor\">\n                            {Array.from({ length: Math.max(1, frameCount) }, (_, i) => {\n                                const frameBlock = wp.data.select('core/block-editor').getBlock(clientId)?.innerBlocks[i];\n                                const frameTitle = frameBlock?.attributes?.frameTitle;\n                                const title = frameTitle ||\n                                    frameBlock?.attributes?.content?.replace(/<[^>]*>/g, '').substring(0, 20) ||\n                                    `${__('Frame', 'flexible-slider-and-carousel')} ${i + 1}`;\n\n                                return (\n                                    <button\n                                        key={i}\n                                        className=\"fsc-slider__frame-title-editor\"\n                                        style={{\n                                            fontSize: `${tabFontSize}px`,\n                                            fontWeight: tabFontWeight,\n                                            textAlign: tabTextAlign,\n                                            padding: `${tabPadding}px`,\n                                            borderRadius: `${tabBorderRadius}px`,\n                                            borderWidth: `${tabBorderWidth}px`,\n                                            borderStyle: 'solid',\n                                            color: tabTextColor,\n                                            backgroundColor: tabBackgroundColor,\n                                            borderColor: tabBorderColor,\n                                            boxShadow: tabBoxShadow\n                                        }}\n                                        onClick={() => {\n                                            const framesContainer = document.querySelector(`[data-block=\"${clientId}\"] .fsc-slider__frames-editor`);\n                                            if (framesContainer) {\n                                                const frameWidth = framesContainer.querySelector('.fsc-frame')?.offsetWidth || 0;\n                                                const currentGap = gap || 10;\n                                                const containerWidth = framesContainer.offsetWidth;\n\n                                                if (centeredSlides !== false) {\n                                                    // Center the target frame\n                                                    const targetScroll = i * (frameWidth + currentGap);\n                                                    const centerOffset = (containerWidth - frameWidth) / 2;\n                                                    framesContainer.scrollLeft = targetScroll - centerOffset;\n                                                } else {\n                                                    // Standard left-aligned scrolling\n                                                    framesContainer.scrollLeft = i * (frameWidth + currentGap);\n                                                }\n                                            }\n                                        }}\n                                    >\n                                        {title}\n                                    </button>\n                                );\n                            })}\n                        </div>\n                    </div>\n                )}\n\n                <div className=\"fsc-slider__preview\">\n                    <div className=\"fsc-slider__preview-header\">\n                        <h4>{__('Slider Preview', 'flexible-slider-and-carousel')}</h4>\n\n                    </div>\n\n                    <div className=\"fsc-slider__preview-content\">\n                        <div className=\"fsc-slider__frames-container\">\n                            {/* Show only the configured number of frames in editor preview */}\n                            <div className=\"swiper\">\n                                <div\n                                    {...innerBlocksProps}\n                                    className=\"swiper-wrapper fsc-slider__frames-editor\"\n                                    style={{\n                                        width: '100%'\n                                    }}\n                                />\n                                <style>\n                                    {`\n                                        [data-block=\"${clientId}\"] .fsc-slider__frames-editor .fsc-frame {\n                                            width: 100%;\n                                            flex-shrink: 0;\n                                        }\n                                        [data-block=\"${clientId}\"] .fsc-slider__frames-editor .fsc-frame {\n                                            width: calc((100% - ${((slidesToShow?.desktop || 1) - 1) * (gap || 10)}px) / ${slidesToShow?.desktop || 1}) !important;\n                                            min-width: calc((100% - ${((slidesToShow?.desktop || 1) - 1) * (gap || 10)}px) / ${slidesToShow?.desktop || 1}) !important;\n                                            max-width: calc((100% - ${((slidesToShow?.desktop || 1) - 1) * (gap || 10)}px) / ${slidesToShow?.desktop || 1}) !important;\n                                        }\n                                        [data-block=\"${clientId}\"] .swiper-button-prev,\n                                        [data-block=\"${clientId}\"] .swiper-button-next {\n                                            position: absolute !important;\n                                            top: 50% !important;\n                                            transform: translateY(-50%) !important;\n                                            z-index: 10 !important;\n                                            width: ${(typeof arrowSize === 'number' ? arrowSize : 40)}px !important;\n                                            height: ${(typeof arrowSize === 'number' ? arrowSize : 40)}px !important;\n                                            padding: ${(typeof arrowPadding === 'number' ? arrowPadding : 10)}px !important;\n                                            border-radius: ${(typeof arrowBorderRadius === 'number' ? arrowBorderRadius : 4)}px !important;\n                                            display: flex !important;\n                                            align-items: center !important;\n                                            justify-content: center !important;\n                                            border: none !important;\n                                            cursor: pointer !important;\n                                            font-size: 20px !important;\n                                            font-weight: bold !important;\n                                            --swiper-navigation-size: 0px !important;\n                                            --swiper-navigation-color: transparent !important;\n                                        }\n                                        [data-block=\"${clientId}\"] .swiper-button-prev {\n                                            left: 10px !important;\n                                        }\n                                        [data-block=\"${clientId}\"] .swiper-button-next {\n                                            right: 10px !important;\n                                        }\n                                    `}\n                                </style>\n\n                                {/* Swiper Navigation Arrows */}\n                                {showNavigation && (\n                                    <>\n                                        <div className=\"swiper-button-prev\" style={{\n                                            backgroundColor: arrowBackgroundColor || '#007cba',\n                                            color: arrowTextColor || '#ffffff',\n                                            width: (arrowSize !== undefined ? arrowSize : 40) + 'px',\n                                            height: (arrowSize !== undefined ? arrowSize : 40) + 'px',\n                                            padding: (arrowPadding !== undefined ? arrowPadding : 10) + 'px',\n                                            borderRadius: (arrowBorderRadius !== undefined ? arrowBorderRadius : 4) + 'px',\n                                            fontSize: ((arrowSize !== undefined ? arrowSize : 40)) + 'px',\n                                            lineHeight: '1'\n                                        }}></div>\n                                        <div className=\"swiper-button-next\" style={{\n                                            backgroundColor: arrowBackgroundColor || '#007cba',\n                                            color: arrowTextColor || '#ffffff',\n                                            width: (arrowSize !== undefined ? arrowSize : 40) + 'px',\n                                            height: (arrowSize !== undefined ? arrowSize : 40) + 'px',\n                                            padding: (arrowPadding !== undefined ? arrowPadding : 10) + 'px',\n                                            borderRadius: (arrowBorderRadius !== undefined ? arrowBorderRadius : 4) + 'px',\n                                            fontSize: ((arrowSize !== undefined ? arrowSize : 40)) + 'px',\n                                            lineHeight: '1'\n                                        }}></div>\n                                    </>\n                                )}\n\n                                {/* Swiper Pagination */}\n                                {showDots && (\n                                    <div className=\"swiper-pagination\" style={{\n                                        '--swiper-pagination-color': dotBackgroundColorActive || '#007cba',\n                                        '--swiper-pagination-bullet-inactive-color': dotBackgroundColor || '#dddddd'\n                                    }}></div>\n                                )}\n                            </div>\n                        </div>\n\n\n\n                        {/* Editor Text Navigation Below Slider */}\n                        {showTextNavigation && textNavigationPosition === 'below' && (\n                            <div className=\"fsc-slider__text-nav-editor fsc-slider__text-nav-editor--below\">\n                                <div className=\"fsc-slider__frame-titles-editor\">\n                                    {Array.from({ length: Math.max(1, frameCount) }, (_, i) => {\n                                        const frameBlock = wp.data.select('core/block-editor').getBlock(clientId)?.innerBlocks[i];\n                                        const frameTitle = frameBlock?.attributes?.frameTitle;\n                                        const title = frameTitle ||\n                                            frameBlock?.attributes?.content?.replace(/<[^>]*>/g, '').substring(0, 20) ||\n                                            `${__('Frame', 'flexible-slider-and-carousel')} ${i + 1}`;\n\n                                        return (\n                                            <button\n                                                key={i}\n                                                className=\"fsc-slider__frame-title-editor\"\n                                                style={{\n                                                    fontSize: `${tabFontSize}px`,\n                                                    fontWeight: tabFontWeight,\n                                                    textAlign: tabTextAlign,\n                                                    padding: `${tabPadding}px`,\n                                                    borderRadius: `${tabBorderRadius}px`,\n                                                    borderWidth: `${tabBorderWidth}px`,\n                                                    borderStyle: 'solid',\n                                                    color: tabTextColor,\n                                                    backgroundColor: tabBackgroundColor,\n                                                    borderColor: tabBorderColor,\n                                                    boxShadow: tabBoxShadow\n                                                }}\n                                                onClick={() => {\n                                                    const framesContainer = document.querySelector(`[data-block=\"${clientId}\"] .fsc-slider__frames-editor`);\n                                                    if (framesContainer) {\n                                                        const frameWidth = framesContainer.querySelector('.fsc-frame')?.offsetWidth || 0;\n                                                        const currentGap = gap || 10;\n                                                        framesContainer.scrollLeft = i * (frameWidth + currentGap);\n                                                    }\n                                                }}\n                                            >\n                                                {title}\n                                            </button>\n                                        );\n                                    })}\n                                </div>\n                            </div>\n                        )}\n                    </div>\n\n                    <div className=\"fsc-slider__preview-info\">\n                        <p><strong>{__('Configuration:', 'flexible-slider-and-carousel')}</strong></p>\n                        <ul>\n\n                            <li>{__('Content:', 'flexible-slider-and-carousel')} {__('Manual Frames', 'flexible-slider-and-carousel')}</li>\n                            <li>{__('Animation:', 'flexible-slider-and-carousel')} {/* transition */}</li>\n                            {autoPlay && <li>{__('Auto Play:', 'flexible-slider-and-carousel')} {autoPlaySpeed}s</li>}\n                            {(showNavigation || showDots || showTextNavigation) && <li>{__('Navigation:', 'flexible-slider-and-carousel')} {showNavigation ? __('Arrows', 'flexible-slider-and-carousel') : ''} {showDots ? __('Dots', 'flexible-slider-and-carousel') : ''} {showTextNavigation ? __('Text', 'flexible-slider-and-carousel') : ''}</li>}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\n// Post Query Controls Component\nconst PostQueryControls = ({ attributes, setAttributes, postTypes, taxonomies }) => {\n    const { postQuery } = attributes;\n\n    const updateQuery = (key, value) => {\n        setAttributes({\n            postQuery: {\n                ...postQuery,\n                [key]: value\n            }\n        });\n    };\n\n    return (\n        <div className=\"fsc-post-query-controls\">\n            <SelectControl\n                label={__('Post Type', 'flexible-slider-and-carousel')}\n                value={postQuery.postType || 'post'}\n                options={postTypes.map(type => ({\n                    label: type.name,\n                    value: type.slug\n                }))}\n                onChange={(value) => updateQuery('postType', value)}\n            />\n\n            <TextControl\n                label={__('Posts Per Page', 'flexible-slider-and-carousel')}\n                type=\"number\"\n                value={postQuery.postsPerPage || 5}\n                onChange={(value) => updateQuery('postsPerPage', parseInt(value))}\n                min={1}\n                max={20}\n            />\n\n            <SelectControl\n                label={__('Order By', 'flexible-slider-and-carousel')}\n                value={postQuery.orderBy || 'date'}\n                options={[\n                    { label: __('Date', 'flexible-slider-and-carousel'), value: 'date' },\n                    { label: __('Title', 'flexible-slider-and-carousel'), value: 'title' },\n                    { label: __('Menu Order', 'flexible-slider-and-carousel'), value: 'menu_order' },\n                    { label: __('Random', 'flexible-slider-and-carousel'), value: 'rand' }\n                ]}\n                onChange={(value) => updateQuery('orderBy', value)}\n            />\n\n            <SelectControl\n                label={__('Order', 'flexible-slider-and-carousel')}\n                value={postQuery.order || 'DESC'}\n                options={[\n                    { label: __('Descending', 'flexible-slider-and-carousel'), value: 'DESC' },\n                    { label: __('Ascending', 'flexible-slider-and-carousel'), value: 'ASC' }\n                ]}\n                onChange={(value) => updateQuery('order', value)}\n            />\n        </div>\n    );\n};\n\n// Responsive Settings Component\nconst ResponsiveSettings = ({ settings, onChange, slidesToShow, slidesToScroll, onSlidesToShowChange, onSlidesToScrollChange, previewBreakpoint, onPreviewBreakpointChange, is3DEffect }) => {\n    const [activeTab, setActiveTab] = useState('desktop');\n\n    const updateBreakpoint = (breakpoint, key, value) => {\n        onChange({\n            ...settings,\n            [breakpoint]: {\n                ...settings[breakpoint],\n                [key]: value\n            }\n        });\n    };\n\n    const updateSlidesToShow = (breakpoint, value) => {\n        onSlidesToShowChange({\n            ...slidesToShow,\n            [breakpoint]: value\n        });\n    };\n\n    const updateSlidesToScroll = (breakpoint, value) => {\n        onSlidesToScrollChange({\n            ...slidesToScroll,\n            [breakpoint]: value\n        });\n    };\n\n    const renderBreakpointSettings = (breakpoint) => (\n        <div className=\"fsc-breakpoint-settings\">\n            {breakpoint !== 'phone' && (\n                <RangeControl\n                    label={__('Min Width (px)', 'flexible-slider-and-carousel')}\n                    value={settings[breakpoint]?.minWidth !== undefined ? settings[breakpoint].minWidth : 0}\n                    onChange={(value) => updateBreakpoint(breakpoint, 'minWidth', value)}\n                    min={0}\n                    max={2000}\n                    step={10}\n                />\n            )}\n\n            <RangeControl\n                label={__('Inner Padding (px)', 'flexible-slider-and-carousel')}\n                value={settings[breakpoint]?.innerPadding !== undefined ? settings[breakpoint].innerPadding : 10}\n                onChange={(value) => updateBreakpoint(breakpoint, 'innerPadding', value)}\n                min={0}\n                max={100}\n                step={5}\n                help={__('Padding inside frames (Standard: 10px)', 'flexible-slider-and-carousel')}\n            />\n\n            {is3DEffect ? (\n                <div style={{ opacity: 0.5, pointerEvents: 'none' }}>\n                    <RangeControl\n                        label={__('Slides To Show (Fixed at 1 for 3D effects)', 'flexible-slider-and-carousel')}\n                        value={1}\n                        min={1}\n                        max={1}\n                        step={1}\n                        disabled={true}\n                    />\n                    <RangeControl\n                        label={__('Slides To Scroll (Fixed at 1 for 3D effects)', 'flexible-slider-and-carousel')}\n                        value={1}\n                        min={1}\n                        max={1}\n                        step={1}\n                        disabled={true}\n                    />\n                </div>\n            ) : (\n                <>\n                    <RangeControl\n                        label={__('Slides To Show', 'flexible-slider-and-carousel')}\n                        value={Math.round((slidesToShow[breakpoint] || 1) * 10)}\n                        onChange={(value) => updateSlidesToShow(breakpoint, value / 10)}\n                        min={10}\n                        max={50}\n                        step={1}\n                        help={__('10 = 1.0 frames, 15 = 1.5 frames, 23 = 2.3 frames, etc. Use for precise peek control.', 'flexible-slider-and-carousel')}\n                    />\n\n                    <RangeControl\n                        label={__('Slides To Scroll', 'flexible-slider-and-carousel')}\n                        value={slidesToScroll[breakpoint] || 1}\n                        onChange={(value) => updateSlidesToScroll(breakpoint, value)}\n                        min={1}\n                        max={5}\n                        step={1}\n                    />\n                </>\n            )}\n        </div>\n    );\n\n    return (\n        <div className=\"fsc-responsive-settings\">\n            {/* Tab Navigation */}\n            <div className=\"fsc-responsive-tabs\">\n                {['desktop', 'tablet', 'phone'].map(breakpoint => (\n                    <button\n                        key={breakpoint}\n                        className={`fsc-responsive-tab ${activeTab === breakpoint ? 'fsc-responsive-tab--active' : ''}`}\n                        onClick={() => {\n                            setActiveTab(breakpoint);\n                            onPreviewBreakpointChange(breakpoint);\n                        }}\n                    >\n                        {breakpoint.charAt(0).toUpperCase() + breakpoint.slice(1)}\n                    </button>\n                ))}\n            </div>\n\n            {/* Tab Content */}\n            <div className=\"fsc-responsive-tab-content\">\n                {activeTab === 'desktop' && renderBreakpointSettings('desktop')}\n                {activeTab === 'tablet' && renderBreakpointSettings('tablet')}\n                {activeTab === 'phone' && renderBreakpointSettings('phone')}\n            </div>\n        </div>\n    );\n};\n\n// Export for block.json\nexport const edit = SliderBlock;\nexport const save = () => <InnerBlocks.Content />;\n\n// Block registrieren\nregisterBlockType('flexible-slider-carousel/slider', {\n    edit: SliderBlock,\n    save: () => <InnerBlocks.Content />\n}); "],"names":["module","exports","window","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","ALLOWED_BLOCKS","TEMPLATE","ResponsiveSettings","settings","onChange","slidesToShow","slidesToScroll","onSlidesToShowChange","onSlidesToScrollChange","previewBreakpoint","onPreviewBreakpointChange","is3DEffect","activeTab","setActiveTab","useState","updateBreakpoint","breakpoint","value","renderBreakpointSettings","createElement","className","RangeControl","label","__","minWidth","min","max","step","innerPadding","help","style","opacity","pointerEvents","disabled","Fragment","Math","round","updateSlidesToShow","updateSlidesToScroll","map","onClick","charAt","toUpperCase","slice","registerBlockType","edit","SliderBlock","attributes","setAttributes","clientId","autoPlay","autoPlaySpeed","touchSwipe","showNavigation","showDots","showTextNavigation","textNavigationPosition","responsiveSettings","loading","sliderType","gap","animationDuration","animationTimingFunc","animationType","animationDirection","animationIntensity","centeredSlides","keyboard","touchRatio","intersectionObserver","align","customCSS","tabFontSize","tabFontWeight","tabTextAlign","tabPadding","tabBorderRadius","tabBorderWidth","tabTextColor","tabTextColorHover","tabTextColorActive","tabBackgroundColor","tabBackgroundColorHover","tabBackgroundColorActive","tabBorderColor","tabBorderColorHover","tabBorderColorActive","tabBoxShadow","tabBoxShadowActive","frameBorderRadius","frameBorderWidth","frameBorderColor","frameBoxShadow","arrowBackgroundColor","arrowBackgroundColorHover","arrowTextColor","arrowSize","arrowPadding","arrowBorderRadius","dotBackgroundColor","dotBackgroundColorHover","dotBackgroundColorActive","gridRows","gridFill","isLoading","setIsLoading","error","setError","activeColorPicker","setActiveColorPicker","setPreviewBreakpoint","blockProps","useBlockProps","textAlign","desktop","tablet","phone","innerBlocksProps","useInnerBlocksProps","allowedBlocks","template","renderAppender","Button","isPrimary","newFrame","wp","blocks","createBlock","data","dispatch","insertBlock","frameCount","useSelect","select","block","getBlock","frames","innerBlocks","slidesToShowCount","ceil","length","useEffect","console","log","includes","currentSlidesToShow","currentSlidesToScroll","needsUpdate","sliderBlock","document","querySelector","framesContainer","display","overflow","width","querySelectorAll","forEach","frame","classList","contains","add","prevButton","nextButton","textContent","currentBlock","blockElement","sliderElement","setProperty","backgroundColor","color","BlockControls","AlignmentToolbar","newAlign","InspectorControls","PanelBody","title","initialOpen","ColorIndicator","colorValue","Popover","position","onClose","ColorPalette","TextControl","placeholder","SelectControl","options","ToggleControl","checked","marginTop","paddingTop","borderTop","isSecondary","fontSize","Notice","status","isDismissible","Array","from","_","i","frameBlock","frameTitle","content","replace","substring","fontWeight","padding","borderRadius","borderWidth","borderStyle","borderColor","boxShadow","frameWidth","offsetWidth","currentGap","containerWidth","targetScroll","centerOffset","scrollLeft","height","lineHeight","save","InnerBlocks","Content"],"sourceRoot":""}